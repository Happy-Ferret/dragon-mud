// Code generated by go-bindata.
// sources:
// assets/assets_suite_test.go
// assets/bindata.go
// assets/existence_test.go
// assets/raw/default_config.toml
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsAssets_suite_testGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8d\xb1\x0e\xc2\x30\x0c\x44\xe7\xfa\x2b\x2c\x4f\x0d\x42\xed\x37\xb0\x20\x66\xda\x1d\x85\x60\x8c\xd5\x36\xa9\x1a\x67\x42\xfc\x3b\x2d\x30\xb2\x9d\xee\xe9\xdd\xcd\x3e\x0c\x5e\x18\x7d\xce\x6c\xf9\x62\x9c\x0d\x40\xa7\x39\x2d\x86\x35\x54\x0d\x92\xa8\x3d\xca\xb5\x09\x69\x6a\x53\xcc\xda\x8a\xc6\x41\x12\xfd\x67\x69\x62\xf1\x04\x50\xd1\xb6\xa4\x51\x08\x1c\xc0\xbd\xc4\x80\xfd\x5a\x1c\x3e\x2f\xb5\xe1\xee\x87\x9b\xde\xe1\x13\xaa\x33\x8b\x66\xe3\xe5\xe8\x75\x3c\xf9\x78\x1b\x79\xa9\xb7\xec\x56\x54\x62\x37\x73\x58\xa5\x3d\xd2\xd7\xc7\xae\xa8\x31\x39\x78\xc1\x3b\x00\x00\xff\xff\xcc\xb6\xb6\x27\xbf\x00\x00\x00")

func assetsAssets_suite_testGoBytes() ([]byte, error) {
	return bindataRead(
		_assetsAssets_suite_testGo,
		"assets/assets_suite_test.go",
	)
}

func assetsAssets_suite_testGo() (*asset, error) {
	bytes, err := assetsAssets_suite_testGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/assets_suite_test.go", size: 191, mode: os.FileMode(420), modTime: time.Unix(1453873521, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsBindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x59\x6d\x6f\x9b\x58\x16\xfe\x6c\xff\x8a\x3b\x96\x3a\x8b\x67\x3c\x36\x18\xf0\x4b\x56\xfd\x30\xd3\x17\xa9\xab\x6d\x67\xd5\xe9\x6a\x3f\x34\x55\x74\x81\x8b\x83\x4a\xc0\x0b\x38\x4d\x1a\xe5\xbf\xef\x79\xce\xb9\x60\x9c\x38\x69\xa6\x5a\xad\xb4\x91\x88\xe1\x72\xcf\xfb\x73\x9e\xcb\x85\xd9\x4c\xbd\x28\x13\xa3\x36\xa6\x30\x95\x6e\x4c\xa2\xa2\x6b\xb5\x29\x7f\x89\xb2\x22\xd1\x8d\x9e\x0e\x69\x42\x5d\xee\xaa\xd8\xd4\x27\x38\xd7\x75\x6d\x9a\x7a\x56\xe9\x2f\xb3\xc4\xa4\x7a\x97\x37\x67\x71\x59\xa4\xd9\x66\xda\x94\x17\x39\x66\xbc\xfc\x5d\xbd\xfb\xfd\x83\x7a\xf5\xf2\xcd\x87\x1f\x86\xc3\xad\x8e\x3f\xeb\x8d\xb1\x72\xc3\x61\x76\xb1\x2d\xab\x46\x39\xc3\xc1\x28\xba\x6e\x4c\x3d\xa2\x93\xb8\xbc\xd8\x56\xa6\xae\x67\x9b\xaf\xd9\x16\x03\xe9\x45\x83\x9f\xac\x94\xff\xb3\xac\xdc\x35\x59\x8e\x8b\x92\x05\xb6\xba\x39\x9f\xa5\x59\x6e\x70\x82\x81\xba\xa9\xb2\x62\xc3\xf7\x9a\xec\xc2\x8c\x86\xe3\xe1\x30\xdd\x15\xb1\xb2\x61\xbc\x37\x3a\x71\x70\xa2\x3e\x7e\x82\xd9\x89\x2a\xf4\x85\x51\x22\x36\x56\x4e\x3b\x6a\xaa\xaa\xac\xc6\xea\x66\x38\xd8\x7c\xe5\x2b\x75\xf2\x5c\xc1\xab\xe9\x3b\xf3\x05\x4a\x4c\xe5\xb0\xdb\xb8\xfe\x6d\x97\xa6\x74\x0d\xb5\xe3\xf1\x70\x90\xa5\x2c\xf0\xc3\x73\x55\x64\x39\x54\x0c\x2a\xd3\xec\xaa\x02\x97\x13\x45\x21\x4d\x5f\x41\x7b\xea\x8c\xa0\x48\x3d\xfb\xf7\x89\x7a\x76\x39\x12\x4f\xd8\x16\xe9\xb8\x1d\x0e\x07\x97\xba\x52\xd1\x2e\x55\x62\x47\x8c\x0c\x07\x67\xe2\xce\x73\x95\x95\xd3\x17\xe5\xf6\xda\xf9\x91\xe6\x4c\xc8\x37\x92\x8a\xf3\x57\xad\xa7\xd3\x17\x79\x59\x1b\x87\xc2\xff\x2f\xf9\x03\x35\xa2\xff\x01\x45\x34\x51\xfc\xb6\x83\xe4\xd6\xf4\x37\xb8\xee\x8c\x27\x98\x31\xa4\x7b\xcd\xf5\xd6\x22\x00\x29\xdf\xc5\x0d\xb4\x70\x7c\xb6\x1e\x64\xa6\x48\x4b\xa5\xca\x7a\xfa\x9a\xca\xfa\x86\x2e\x3a\x39\x5b\xc2\x76\xbc\xa7\x81\x6b\x48\x7f\x52\xc6\xe1\xa0\xce\xbe\xf2\x75\x56\x34\x8b\x60\x38\xb8\x00\xae\x55\xa7\xf4\x2d\x5d\xf2\xe0\x07\x42\x88\x02\x4c\xa6\x38\x83\x1d\x86\x8a\x93\x66\x77\x6d\x8d\xd5\x3b\x32\xe1\x8c\xad\x05\xd8\xb4\x51\xa6\xd9\x14\xd6\x49\xf8\x61\xd9\x3f\xc8\x1d\x92\x65\x6f\x0e\x45\xe1\xe8\xa3\xa2\xf0\x95\x44\x7b\x9e\x1f\x2a\x40\x68\xdf\x52\x80\xe0\x48\x47\x17\xe8\x3d\x0d\x36\xfa\x87\x95\xbc\xa9\x5f\x66\x15\xa9\x88\xca\x32\xef\x4b\xeb\xbc\xfe\x46\xe4\xd7\xb5\x04\x6e\xaa\x54\xc7\xe6\xe6\xb6\x27\x6d\x21\x01\x94\x9f\x1d\x32\xc8\x07\x22\x10\x02\xb8\x20\xc2\x19\x9d\x5e\x79\xe9\xe9\xd5\x2a\x3a\xbd\x72\x57\x74\xb8\xf6\x58\x9f\x5e\x2d\x0c\x8d\xdb\xb1\x94\xe6\x2c\xe2\xd3\xab\x30\xa0\xc3\xa3\x73\x9a\x9f\xd0\xe1\xd3\x3d\x8f\x8e\x25\xcd\x8d\x69\x8e\xa6\xc3\x27\x99\x64\x4e\x72\xcb\xd3\xab\x88\xae\x3d\x92\x89\xe8\x5c\xfb\x32\x3f\xd0\x74\x4e\x3a\x0c\xe9\x5b\xe0\x37\x21\xfd\x0b\x91\x59\xd0\xb9\xa6\x71\x8f\x7e\x57\xbe\xd8\xc2\xfc\x35\xfd\xea\x44\xfc\x9c\xd3\xef\x9c\xe6\x06\x74\xbe\x26\xbb\x73\xd2\x3f\x27\xfd\xab\x40\x74\xc0\xd7\x88\xc6\x0d\x7c\xa6\xb1\x98\xee\x05\x88\x87\x6c\xaf\xe9\x58\xc1\xdf\x90\x0e\x1a\x4f\xe0\xf3\x52\xe6\xc6\x46\xae\x53\x9a\xbb\x22\x1f\x0c\xe2\x87\x4f\x64\x3f\xa2\xeb\x88\xec\x19\xf2\x49\x07\x72\x7f\x95\x48\x3e\x34\xcd\x8f\x29\xe6\x88\xce\x7d\x9a\xbf\xa6\x58\xbc\xa5\xf8\xea\xd3\xfc\x14\xf1\xd2\xe1\xd3\x31\x5f\x88\x3f\x0b\x92\x31\x74\x3f\xa6\xfb\x6b\x2d\x36\xe0\x43\x48\xf7\x35\xe4\xd7\x62\x1b\xb1\xc7\x0b\xb1\xbd\x44\x6c\x9e\xd8\x4e\x57\xa2\x1f\xb9\x5d\x26\x52\xab\x75\x28\x75\x59\xd3\xbd\x90\xe6\xc6\xa8\x11\xdd\x4f\x23\x89\x3b\x85\x3e\xb2\x37\xa7\x23\x76\xa5\x16\x11\xcd\x0d\x50\x2f\xc8\x23\x1e\xba\x17\x85\x76\x0e\xf2\x8c\x18\xe8\x3a\x5c\x49\x0e\xe1\x2b\xe6\xc3\x7e\x88\xf9\xf0\xd9\xc8\xaf\x3b\x97\xf9\xc8\x2d\x70\x80\x18\x70\x0e\xdf\x5d\xe4\x15\xf5\xa3\xdf\xb9\x91\x58\x12\xd2\xb1\x24\x1f\x34\x7c\x31\xe2\x37\x72\x8a\x98\xe1\xc7\x12\xf8\x80\x4e\x92\x31\xb0\x4d\x79\x0b\x5d\xa9\x79\x5b\x03\xd4\x1e\x38\x72\x8d\xd4\x3a\x71\xe5\x9a\xe3\x32\x92\xf7\x08\x35\xa4\xeb\xb9\x16\xbf\x61\x3f\xf2\xad\x9f\xda\xe2\x1c\x39\xf4\xa5\x0e\xc8\x67\x10\x4b\xde\x11\x3b\xea\xe5\xd3\x31\x5f\x09\x56\xdc\x50\x30\xe8\x79\x82\x5f\xf8\x0f\x6c\x26\x5a\xf0\x8a\x3c\x03\x0f\xa8\xb7\x4b\xe3\x11\xe9\x31\x73\x89\x21\x35\x52\xc3\x74\x29\xf9\x80\xcd\xc0\x13\xbc\xc3\x8e\x26\x39\x8f\xe4\x56\xc8\xc7\x5c\xf2\x90\x58\xf9\x84\x7c\x5a\xd2\xdc\x98\xec\xbb\xf4\x9b\x60\x3e\x70\xbe\x90\xfe\x41\x3f\x00\x6b\x2b\x4f\x74\x01\xe7\x1c\x27\xc9\x46\x6b\xe9\xb3\xa5\x2f\x18\x05\x66\xbd\x95\x8c\xa3\xd6\xf0\xd9\xb8\x36\xef\x9e\xe4\x1c\xf8\x00\x86\x52\x57\xfc\x44\xde\xe0\x2b\xfa\xcc\xb5\x78\x46\x5f\x03\x6b\xda\xf6\x09\xe3\x38\x91\x7c\x23\x87\x9e\xed\x41\xd4\x04\xfd\x86\x3e\x42\x5c\xe8\x03\xf4\xb9\x6b\xe5\x57\x14\xd3\x6a\x21\xf6\x83\x40\x6c\xc2\x16\x6a\x18\xd9\x3e\xc7\x1c\xd4\x01\x18\x04\x56\x30\x0f\x78\x30\x9e\xf8\x07\x8e\xf0\x22\xc1\xa0\x09\x04\xc7\xde\x42\xe2\x65\x9e\x32\x96\x53\xe6\xc2\x6f\x38\x80\x17\xce\xa3\xad\xd5\xda\xf6\x63\xcb\x7b\xf0\x75\xb1\x10\xfd\xe0\x16\xf0\x1c\xf0\xef\xf9\xd2\x7b\xf0\x1f\xd8\xd3\x16\x07\xe0\x2f\x37\x92\xfa\x21\x3e\xe4\x1b\x35\x42\x2f\x01\x3b\xf0\x71\x19\x09\xae\x81\x5f\xe0\x06\x39\xc2\x5c\xf4\xfd\x0a\xb6\xc9\xaf\x20\xb1\x31\x7b\xd2\x57\xe8\x2f\xf0\x17\x74\x9b\xa5\xd4\x0a\x7e\xa2\xf7\x34\xb8\x6c\x61\xb9\x2c\xb6\x18\x5a\x4a\x6f\x2c\xd7\xe2\x67\x48\x73\x12\x4f\x38\x7b\xee\x09\xde\x19\xc7\xa1\xe0\x9d\xf3\x62\x71\xbf\x20\x3d\x41\x6a\xf9\x8a\x64\xbd\x50\x6a\x88\x3e\x01\x36\x0c\xe9\x5f\x84\x82\x1f\xd8\x43\xfe\x63\xe4\x69\x29\x7d\x09\xcc\xcc\xd7\x82\x6f\xf8\xee\xa7\x82\x51\xf0\x29\x74\x33\xf7\xad\x85\x4b\x81\x4d\xdf\x13\x6e\x89\x03\x7b\x2f\x16\xfd\x6b\x8b\x59\xf8\x91\x80\x4b\x56\x72\x2f\xb0\x3c\x03\x0c\xb8\xbe\xf0\x6d\xcb\x11\xe0\x44\xd4\x67\x0e\x4e\x89\xa4\xa6\xa8\x09\xd6\x03\xe4\x1c\xb5\x40\x5f\xa0\x3f\xe6\xb1\xf8\xca\x5c\x14\x48\x4f\x03\x0b\xe0\x50\xf4\x17\x72\x82\x35\x8f\xd7\xba\x85\xe0\xc0\x8b\x25\x7e\xf0\x25\x6a\x90\x5a\xf9\xc8\xb3\xf9\xf5\x65\x1d\x04\x2e\x80\x25\xe4\x08\x6b\x15\x6a\x16\x82\x4b\x03\xc9\x01\xb8\x0f\xbd\xca\x7e\xf9\xb2\x7e\x01\xe7\x58\x23\xb1\x8e\x18\x2d\x18\x03\x07\xa1\x3f\x5d\xbb\xae\x85\xc0\x7e\x20\x75\x67\x0e\x5a\xda\x1a\x6b\xbb\x7e\xaf\x04\xfb\xcc\x37\x89\xe0\xc8\x5f\x48\x3f\x21\x1f\xa9\x5d\x17\xf9\x00\xaf\xc7\xe2\x1f\xd6\x3e\x7f\x2d\x79\x03\x3e\xc1\x9f\x38\x5c\xbb\x16\x02\x5f\x88\x0b\x7d\x8d\xde\x60\xde\x8a\x05\xa3\xe0\x51\x63\x31\xc2\xf3\x43\xe1\x5a\xd4\x04\x7c\x8b\xfc\xa1\x6f\x59\x76\x6d\xd7\xbf\x95\xf8\x83\x75\x22\xb6\x6b\x37\xee\x81\xab\xb1\x6e\x80\x97\x98\x5f\xb4\xd8\xc2\xf8\x3a\xb2\xcf\x29\x91\xac\x9d\xd0\x0b\x9c\xe0\x08\x42\xe1\x0a\xac\xc7\x58\x37\xd0\x1b\xa8\x0f\xf8\x89\xd7\xe0\x85\xdc\x43\x3e\x30\x86\xda\xc6\xb1\x5d\xe7\xe6\x16\x6b\xa1\xc5\xa9\x96\x83\x39\xd1\x97\x98\x42\xcb\x4f\x2d\x7f\x63\xdd\x06\x06\x78\x2d\xd3\x52\xd7\x34\x90\xf5\x00\x6b\x25\x7a\x0a\x39\xc7\x3d\xf4\xa3\xb1\x6b\x73\xea\x4b\xbe\x75\x64\xd7\xa5\x50\x30\x86\xfa\xc1\x6f\xf8\x05\x39\xd4\x1d\x7c\x82\xfe\xc7\x9a\x8d\xfb\xe0\xaa\x34\x16\xfb\xc0\x03\x78\x03\xdc\x13\xb9\x92\xcf\x24\x11\x8e\x83\x5f\xe8\x0b\x3c\x97\x01\x7f\x58\x17\x90\xcf\xd4\xf2\x42\xfb\x8c\x07\x3c\xf1\x61\xb9\x2d\xb0\x6b\x18\xfa\xc8\x0d\xda\x79\xa3\x76\x8f\x77\xff\x29\xd2\xee\x3f\x8e\xed\xeb\xda\x5d\x4a\x6f\x5f\x48\x1b\x9a\x23\x4f\xa2\x13\x1a\x1e\x1d\xd9\xe2\x8e\xe8\xc6\xb8\xdb\x34\xdc\x97\x83\xd9\x9f\x78\xaf\xd3\x37\xcb\x9b\x9d\x6e\x47\xf9\xa0\xc7\xdf\xda\xb5\x75\x9b\x2d\xde\x2e\x91\xa6\x3b\x8f\xde\x37\xd8\x94\x9c\xa8\xe3\x7e\x2b\x6c\x3b\x4e\x94\x37\x0f\x97\x13\x85\x1d\xc4\x49\x7f\x83\xe1\x04\x73\x77\xcc\xe3\xd8\x17\x9c\xc8\xbe\xe1\x9f\x45\x76\xe5\x78\x41\xe8\xaf\x96\xde\xda\xf5\x27\xca\x1d\xd3\x96\x50\xc3\xf2\x8f\x1c\xe3\x0d\x07\x76\xa2\x6c\x7c\x70\xeb\x84\xff\xdf\x76\xa9\xd6\xdd\x36\x70\x36\x53\xbf\xf2\x26\x30\x2f\x75\x52\x2b\x5d\x24\x4a\xe6\xd4\xaa\x39\x6f\x37\x88\x69\x59\xf1\xd5\x26\xbb\x34\x05\x6f\x46\xf9\x1d\xc4\x9b\xa6\x9b\xab\x0b\x49\xac\xa2\x5c\xed\xe5\xe2\x72\x97\x27\xaa\x28\x1b\x15\x19\x52\xb2\x23\xe5\x65\x05\xc9\x83\x1b\xb0\x6c\x92\xa9\x14\x8f\x9d\x71\xbe\xf5\x26\x20\xd6\x45\x51\x16\x59\xac\x73\x6c\x06\x11\xba\x7d\xdb\x30\x7d\x6f\xb6\x39\x6d\x6f\x1c\xd9\x31\x8f\x4e\x4f\x29\xc7\xa3\x19\xfd\xfb\xc5\x93\x4a\xd2\x06\xbd\xfc\x0c\x89\x33\x5b\xa7\x8f\x87\xca\x3e\xfd\x15\xf7\x51\x64\xdd\x61\x23\x05\x0a\x8e\xc0\xe0\xc1\xdd\xbb\xa4\xf4\x59\xad\x48\xf7\x5f\x90\x25\xcd\xef\x70\x38\x80\x23\x5b\x7a\xec\xe9\xbb\xd2\x4c\x6d\xdd\x50\xa0\xc1\xed\xf0\xdb\x36\x90\x46\x4e\xae\xd5\x3a\xb6\x75\x7d\xbb\xab\x1b\x99\x94\xd5\x2a\xcf\x3e\x1b\x5b\xe9\x68\xd7\xa8\xad\xa6\x80\x6b\xf5\xe5\x9c\xea\x29\xa3\x5f\xb8\x24\xad\x13\xb6\x9c\x6d\x99\xeb\xec\x62\x9b\x67\x69\x66\x6a\x55\xeb\xd4\x10\x9a\xb2\x26\xd3\x79\xf6\x55\x37\x59\x59\xa8\x32\x55\x9b\xbc\x8c\x74\xae\x68\x0b\x99\xe9\x28\x37\xb5\x2d\x67\xe7\xc3\x61\x49\xa5\xa2\xc8\xe1\x3e\xc9\xfb\x69\x47\x5b\x8e\x3d\x76\x46\x0c\xac\x13\x3b\x79\xa4\x7e\x96\x97\x46\x3f\xab\xd1\x98\x5a\x8c\x7e\x49\x4a\x32\xe4\x8c\xc7\x07\xef\x40\x74\x1f\xed\xfc\xd2\xe2\x31\xc4\x73\x2f\xff\xaf\x61\x0f\xaf\xee\x40\xbf\xf7\xf2\xe5\xff\x0e\xff\x9c\xe4\xef\xec\x81\x8c\x03\x7e\x52\x0b\xb4\x66\x1e\x6a\x03\x9e\x84\xc8\xea\x83\x3a\x17\x3c\x52\xf6\xea\x56\xf7\x6b\xc1\x02\x0e\x90\xba\x7f\xcf\x24\x22\x94\x8f\x0b\xfd\xd9\x38\xed\x1d\x22\xe0\x89\xca\x4d\xe1\xb4\x09\x05\xf0\x00\x9d\xc2\x96\xa6\xd2\xc5\xc6\x74\xe9\xe6\xc4\x89\xa6\xe7\x4a\x6f\xb7\xa6\x48\xb8\x58\x75\xeb\x75\x3f\x60\x8c\xdb\x30\x3a\x79\x6a\x66\xad\x1a\x34\xd9\x44\x9d\x97\x79\x02\xe7\x8c\x8e\xcf\x2d\xf8\xec\x4b\xe3\xb2\xa2\x75\x03\xea\x13\xd5\x94\x2a\x6b\x6a\x8b\x5f\x7e\xc7\xd3\xaa\x42\x24\xdb\x8f\x12\xc6\x27\xc4\x7e\x7f\xa1\x24\x6f\x8f\xae\x5c\x27\x47\x16\xcc\x49\x3f\xe3\x2f\xb3\xea\x20\xdf\x78\x35\x6c\x93\x1e\x99\xbc\xfc\x42\x41\xc4\xa6\x6a\x74\x56\x40\x24\xc9\x2a\x13\x93\xd3\x84\x8f\x8b\xc8\x24\xd4\x18\xd4\x82\x7b\xb9\xfb\xef\xbf\x5f\x53\x82\xcd\x95\x26\x5a\x32\x68\xbe\xeb\x72\xa7\xaa\x5d\xd1\x9b\xa5\x88\x97\xf0\x3b\x9b\x4e\xa7\xdc\xe4\x3c\x48\xce\xc2\x24\xbb\x04\x35\x69\x99\x93\x2f\x48\xe1\x79\x46\x69\xab\xe2\xf3\x6b\x7e\xa5\x8e\x3f\x96\x6e\x2f\x14\x4d\x2d\xa7\xcd\x55\xb3\x1f\xc8\x2e\x36\xbd\xdb\x8a\x50\xbb\x2d\x36\xfd\x81\xa8\x1d\x68\x3a\x9a\xc5\xcb\xbb\x11\x14\x8f\xc6\x87\x8c\xdb\xa2\xe9\x66\x64\xed\xa0\x6f\xc9\xc2\xe8\xb6\x9f\x51\x91\x9d\x61\xfc\x41\x79\x76\x03\xd2\x6c\xfe\xae\x7c\xab\x7d\xcc\x39\xd9\x8f\x53\xf7\x98\xab\xac\x6e\xee\xea\x6d\x19\xee\x50\x0b\x66\x65\x79\x7e\xdf\x38\x87\x76\xdb\x6f\x24\xcc\xbf\xbb\x9c\xb7\x8d\xb3\x27\xb4\x02\xaf\x53\x2d\x29\x35\x95\x31\x4c\x55\x68\x2a\xee\x09\x70\x8e\xcb\x8d\xf3\xbd\xc4\x37\xc0\x57\x89\xbf\x53\x7c\x7d\x91\x3f\x68\x4d\x6b\x9c\x43\x95\x2c\x04\x01\x74\xf0\xd9\x44\x6d\xf7\x1d\xdc\xa9\x60\xea\x63\x8f\x89\x0a\xe9\x67\xfa\xe2\x3c\xcb\x93\xca\x14\x1f\xb7\x9f\x70\x8b\x5c\x97\xbb\x3d\xa6\xfc\x9e\x65\x7c\x20\xa4\x78\xdb\xbe\xf3\x67\x5b\xaf\x91\xd9\x27\x7c\x40\x78\x4c\x2f\x18\xe6\xf2\x61\x22\x3b\x88\xa9\x65\xb3\x18\xd7\xef\x0e\x28\xed\x60\x9e\x38\x73\xb9\x27\xb5\xea\x72\xb2\x17\x3a\xa0\x35\xdc\xe9\x7f\x85\xb0\x35\xef\x7d\x45\xe0\x20\xb9\xe9\x8e\x92\xd2\x70\xd0\x59\xed\x11\xd8\x4f\x2d\x76\x6e\x3b\x96\x63\xb5\xf4\x5c\x6c\x4f\x6f\x38\x4b\x47\x44\x1e\x66\xb9\x4e\xf4\x08\xdd\x1d\xd5\x74\x7b\x4b\x34\x28\x3c\xf8\xde\xd4\x44\x69\x46\x2a\x51\xc9\x05\x3f\x33\x08\x53\x53\x49\x4c\xff\x01\xa3\xe3\x40\xe9\x9e\xbe\xb4\x43\xf7\xee\x7c\x1f\x93\xe7\x0e\x72\x1c\x2d\xf7\xd4\x87\x28\x5b\x00\xbb\x65\x19\x64\xed\x63\x45\x27\xda\x3d\x82\x3c\x45\x5c\x3e\x7e\xd1\x23\xca\xdb\xcf\xe4\xdf\xaf\x79\xee\x9c\x81\xad\xff\x41\x7d\x22\x0e\xb7\x9f\x03\xa7\x2d\x09\x8c\x69\x37\xd3\xdf\xdf\xb8\xcb\x30\x7c\xf4\x3b\xdd\xa1\x29\xf9\xe6\x38\xfd\x57\x95\x35\x06\x3a\xee\xda\x63\x13\x13\x25\x19\x41\x70\x53\xf9\x68\xf3\xa7\x82\x79\x71\x8e\x6d\x56\xfd\x80\xee\x56\xab\x7c\xc9\xb9\x7b\xfd\x14\x43\x87\xdf\x5c\xee\xc0\xa4\xfe\x33\x38\xa1\xb9\xf1\xae\xaa\x69\x30\x3f\x82\x99\xfa\x31\xd0\xc4\xb6\x7f\x0e\xab\xdf\x95\x69\x38\xc0\x12\x4b\xf1\x3f\x12\xcf\x71\x7c\x4a\xa3\xe3\x93\x73\x56\x0d\x5b\x12\x65\x6b\x7b\xde\x88\xfb\x94\x21\x79\x3f\xe2\x78\x07\x9e\xbf\x95\x59\x61\x69\x9d\x25\xc7\x8f\x3f\x8c\x72\x9e\x2d\x69\x1e\xe6\x9a\x53\x74\xa4\xac\x5d\x7a\xf6\x8f\x7a\xdf\xbb\xce\x74\x1f\xf3\xfa\xbe\x5b\x42\xec\x56\x49\x32\x7c\x3b\x79\xc2\x2a\x44\x4f\x2e\x7c\xc0\xf7\xff\x04\x00\x00\xff\xff\x9e\x73\xfa\x14\x14\x20\x00\x00")

func assetsBindataGoBytes() ([]byte, error) {
	return bindataRead(
		_assetsBindataGo,
		"assets/bindata.go",
	)
}

func assetsBindataGo() (*asset, error) {
	bytes, err := assetsBindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/bindata.go", size: 8212, mode: os.FileMode(420), modTime: time.Unix(1453873521, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsExistence_testGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8f\x41\x6a\x2c\x21\x10\x86\xd7\x7a\x8a\xc2\x95\xc2\xbc\xee\xfd\x83\x59\x24\x24\x8b\x6c\xb2\xc9\x01\x1a\xdb\xae\x76\xa4\xd5\x1a\xb4\x0c\x81\x90\x03\xe5\x32\x39\x53\xec\xcc\x22\x4c\x18\xd0\xda\xfc\x5f\x7d\xc5\x7f\xb6\x6e\xb3\x1e\xc1\xd6\x8a\x5c\x27\xc6\xca\x52\x86\x74\xa6\xc2\xa0\xa5\x18\x40\xf9\xc0\xa7\x36\x0f\x8e\xd2\x38\xcf\xcd\x6d\xe3\x52\xac\xa7\xfc\x2f\xb5\x65\xbc\x6c\x29\xf9\x17\xa4\x5c\xc3\xe8\x43\xde\x3c\xa9\xdb\x19\x25\xf4\x56\x49\x23\xe5\xab\x2d\x30\xc1\x11\x1e\xb0\xba\x12\x66\xd4\xea\xf1\x2d\x54\xc6\xec\x50\x1d\x60\x6d\xd9\x69\x03\xef\x52\xfc\xe6\x0b\xae\xb6\x45\x9e\x1c\xe5\x35\xf8\x81\x29\xc5\x2b\x52\x3c\xb1\x56\xf5\x44\x2d\x2e\x80\xbb\xab\xb7\x03\x9b\x2f\x1d\x61\x0d\xf1\x5a\x2c\xc4\x74\x00\x2c\x05\xfe\x1f\xe1\x6e\x47\x6e\x5f\x30\x3b\xf9\xf5\xa9\x3b\x69\x86\x97\x1f\xbb\xbe\xc7\xe7\x10\xb5\xd9\xa3\x8f\x3e\xfa\xef\xef\x3b\x00\x00\xff\xff\xa5\x9d\xe8\x71\x53\x01\x00\x00")

func assetsExistence_testGoBytes() ([]byte, error) {
	return bindataRead(
		_assetsExistence_testGo,
		"assets/existence_test.go",
	)
}

func assetsExistence_testGo() (*asset, error) {
	bytes, err := assetsExistence_testGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/existence_test.go", size: 339, mode: os.FileMode(420), modTime: time.Unix(1453873521, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsRawDefault_configToml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x54\x5d\x6b\xdc\x3a\x10\x7d\xdf\x5f\x31\x6c\x1e\xfc\x12\x9c\x5c\x02\x97\x10\x08\xf7\xe1\x26\xed\x4b\xda\xd2\xa4\x14\x4a\x08\x41\xb6\x66\x6d\x11\x59\x72\x25\x79\x97\x25\xe4\xbf\xf7\x8c\xfc\xb1\xbb\x50\xd8\x05\x6b\x66\xce\xd1\x99\xf1\x19\x9f\xd1\x5d\x50\x8d\x77\x77\x9c\x94\xb1\x91\x2a\x15\x99\x36\xc6\xf2\x6a\x75\x46\x9f\x55\xc7\xe4\x38\xed\x7c\x78\xa3\xda\xbb\x8d\x69\x86\xa0\x92\xf1\xae\x5c\x3d\x23\xfe\x22\x45\xff\xb7\xca\x35\x4c\xa9\x65\xea\x7d\x48\xf9\xa1\x11\x60\x18\x5c\x24\xef\xce\xa9\xda\x93\xe6\x8d\x1a\xac\x24\x4d\x24\xfc\xae\x2f\xaf\x2f\x81\x95\xba\xd7\x8c\xba\x9d\x43\x7f\xa3\x8b\x1c\xb6\x1c\xa8\x0f\x66\xab\xd2\x14\x9f\xd8\x4b\xfa\x21\x94\x27\x29\x23\x09\xbb\x07\x19\x34\x3b\xae\x93\xaa\x2c\x9a\x0a\xbe\xcb\x6c\x9d\xaa\x5b\xe3\x98\x5a\x1f\x93\x71\xcd\xf1\x0d\xca\x69\x41\x4b\x44\x18\x68\xa7\xf6\x94\x3c\xb2\x4e\x83\xad\x78\xba\x7f\xfc\x79\xff\x58\x50\xc7\x31\xaa\x86\xa3\xe4\x94\xb5\x38\x77\x5c\x71\xc0\xb5\x9b\xa5\xfd\x92\xbe\xe1\x31\xe0\xac\x5c\x6e\xfb\x9c\x4c\x2a\x46\xee\x88\x3c\xf8\x54\x9c\x05\x66\x19\x7e\xcc\x25\x88\x50\x41\xe7\x56\x4a\x54\x4d\xad\x1d\x8d\xe9\x1f\x19\xfb\x1d\x6f\xa4\x09\xeb\x81\x54\xa1\xe1\x14\x11\x7c\x90\xd3\xbe\x67\xe1\x8d\x26\x26\x11\x54\xf8\x58\xe4\xc6\x0a\x79\xad\x85\x0c\x8c\xc7\xa0\x54\x42\x02\xf4\xb5\x6a\xcb\xa4\x26\x22\x80\xa4\xd9\x98\xb4\x1f\xd2\x04\xc5\x81\x43\x28\x68\xd7\x82\x23\xeb\x5c\x6a\xf3\x69\xe4\x9e\x18\x63\xeb\x07\xab\xa9\x62\x62\x93\x67\xa0\xc0\x17\xd8\xc2\x39\xb8\xa6\x57\xa9\x9d\x9b\x15\xf5\x82\x24\x8f\xa2\x2a\x7a\x3b\xa4\xb1\xa0\xa4\x2f\xb0\x8b\xe9\xed\x49\x87\xa4\x82\xcc\x2d\x0e\xbd\x0c\x83\x35\x5c\xf8\x8c\x74\x39\xa5\x5f\xe0\xc7\xdc\xfd\x2d\xad\x7d\x5c\xaf\x26\x89\x38\x8d\xbd\xac\xb3\x5d\x27\x1b\x8f\x5d\x68\x05\x73\xc0\xf2\x25\x7d\x12\x09\x64\xa7\xa1\x2d\x57\x2c\x15\xf0\x98\x65\x59\x8e\xba\xe5\xfa\x4d\xc0\x20\xdb\x99\x37\x33\x0e\x74\x36\xf8\x5c\x2e\x36\x7a\xfa\xfe\x60\x12\x43\xe4\x72\x8b\xe6\x2d\x5b\xdf\x77\xec\x64\x77\x94\x56\x7d\xc2\x78\x44\xe0\x6f\x8b\xd2\xab\xf5\x2a\x4f\x03\x01\x81\x5c\xbc\xbf\xcb\x06\x7e\xc5\xff\xe3\xa3\x5c\x4a\xc4\x39\x07\x64\x0f\x17\x37\x81\xd1\xee\x19\x0d\x71\x8c\xc9\x73\xaf\x62\xc4\xde\xea\xf9\xac\x2b\x27\x4b\x29\xd4\x79\xe1\x5f\xbb\x41\x4b\x3c\x46\xdb\x79\x3d\x26\x4c\x94\x4d\xc9\xd5\xd1\x1d\x93\xdf\x5c\x5c\x58\x5f\x2b\x2b\x2b\x73\xa2\xea\xbf\x09\x7e\xbb\x60\x4f\xd5\x75\x7b\xc8\x3e\x22\x5c\x58\x6e\xae\xae\x2e\xff\x3d\xa1\xca\xd0\x5f\x7e\x98\xed\xa3\x47\x83\x1f\x86\xd7\x07\xaf\x87\x5a\xbe\x3e\x2f\xb2\x3a\x3b\xc6\xe6\xc1\x47\x08\x6f\x0d\x1a\x38\xa4\x01\xcd\x1f\x33\xf0\xe1\x00\xcb\xd6\xed\xe1\xbd\x00\x81\x31\x95\xab\x3f\x01\x00\x00\xff\xff\xf5\x66\x51\x77\xf9\x04\x00\x00")

func assetsRawDefault_configTomlBytes() ([]byte, error) {
	return bindataRead(
		_assetsRawDefault_configToml,
		"assets/raw/default_config.toml",
	)
}

func assetsRawDefault_configToml() (*asset, error) {
	bytes, err := assetsRawDefault_configTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/raw/default_config.toml", size: 1273, mode: os.FileMode(420), modTime: time.Unix(1453874935, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/assets_suite_test.go": assetsAssets_suite_testGo,
	"assets/bindata.go": assetsBindataGo,
	"assets/existence_test.go": assetsExistence_testGo,
	"assets/raw/default_config.toml": assetsRawDefault_configToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"assets_suite_test.go": &bintree{assetsAssets_suite_testGo, map[string]*bintree{}},
		"bindata.go": &bintree{assetsBindataGo, map[string]*bintree{}},
		"existence_test.go": &bintree{assetsExistence_testGo, map[string]*bintree{}},
		"raw": &bintree{nil, map[string]*bintree{
			"default_config.toml": &bintree{assetsRawDefault_configToml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

