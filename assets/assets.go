// Code generated by go-bindata.
// sources:
// assets/raw/Dragonfile.toml
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dragonfileToml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x56\x4d\x6f\xdb\x46\x10\xbd\xeb\x57\x0c\x94\x03\x2f\x81\xe0\xa4\x46\xe3\x16\xd0\x21\x8d\x73\x30\xd0\xd6\x45\x92\x16\x28\x8c\x40\x58\x91\x43\x72\x63\x72\x97\xd8\x5d\x4a\x51\x83\xfc\xf7\xbe\x99\x25\x69\x29\x41\x90\xc0\xb6\x66\x67\xe7\xe3\xbd\x37\xb3\x7a\x46\x5f\xbe\x34\xa6\xe7\x5d\xb2\xa9\xe3\xaf\x5f\x69\x6f\x22\x53\xe9\x5d\x6d\x9b\x31\x98\x64\xbd\xa3\xda\x76\xbc\x5a\x39\x78\xd1\x96\xd6\x97\xfe\xeb\xd5\xea\xbb\x10\x8e\xd3\xd1\x87\xc7\xcb\x28\x9b\xd5\x03\xec\x1f\x57\x2b\xa2\x67\x74\xe7\x12\x87\xda\x94\x4c\x36\x52\x6a\x99\x4c\x55\x05\x8e\x91\x4e\x7e\xa4\xa3\x71\x49\x8d\x91\xc3\x81\x03\x25\x4f\x7b\xeb\x2a\xfc\xde\xd0\x6f\x27\xaa\xb8\x36\x63\x97\xc8\xa6\x22\x6a\xb0\x75\xe7\x4b\xd3\xb5\x3e\xa6\x35\xed\x47\x39\xa0\xd2\x38\x32\x5d\xc4\x45\x89\x92\x24\xc4\xfa\x6a\xa3\xff\xd6\x64\x22\x1d\xb9\xeb\xc8\x07\x32\xce\x23\x51\xa0\xbb\xbf\xe6\x0a\x34\x62\xd2\x8b\xa6\x2c\x61\xb0\xfb\x8e\xa9\x0e\xbe\x27\x3f\xa6\x68\x2b\x3e\x2b\x6d\x03\x6f\xbb\xb4\xb2\x3d\xaf\x24\xf7\xf9\xa6\x35\xae\xc9\x37\x06\x1f\xa4\x2b\x93\xbe\x45\x2b\x8c\x2e\x92\x77\xf0\x57\x97\x2d\xdd\x5c\xdd\x5c\xfd\xe8\xfa\x02\xca\x10\xec\xc1\xa4\xc9\x3e\x85\xd8\xd0\x87\x16\x78\x5e\x1c\x59\x39\xe8\x4e\x1a\x0e\x7c\x38\x2e\x93\x59\x3a\x92\x78\xbd\x29\x5b\xeb\x98\xa4\x6a\xeb\x9a\xf3\x1c\x06\xa0\x4f\xfc\x48\x0c\x10\x73\x12\x68\x22\xbb\x4a\xe3\x15\xef\xdf\xbe\xfb\xe7\xed\xbb\x82\x7a\xe0\x64\x1a\x8e\x72\x6a\x80\x6c\xcf\x3d\xef\x39\x20\x75\xad\xb7\xa5\xdf\x0d\xdd\x2b\xd4\x80\xc0\xe1\x87\x8d\xcf\x95\xc1\x9c\x0f\xe7\x1a\x11\xd4\x4c\x45\x6a\x29\x3e\x9f\x26\x14\x62\x42\xa5\x0d\x6d\xd4\xef\xc3\xfd\xed\xfd\xaf\xf4\x3a\x46\xd1\x0c\xdc\x85\xa7\x74\x92\xb3\xa9\xf9\xdd\x13\x96\x2f\x44\xa1\xb7\xc1\x34\xde\xfd\xf1\xf7\x2d\x8d\x91\x73\xd2\xd7\x01\x96\x97\x16\xc5\xa6\xd6\x57\x54\x43\x0e\xec\xca\x70\x1a\x34\xf7\x60\x62\x84\x88\xab\x38\x81\x8a\xff\x66\x02\x60\xf5\x6c\x51\x76\xe6\x06\xed\xfa\x70\xa2\x68\xff\xe3\xb9\xe3\x39\x12\xa6\x47\x50\x14\x53\xc7\xae\x49\xed\xec\x50\x5b\x67\x3a\x44\x82\xa8\x86\x31\x49\x12\xc6\xdc\x1d\x4c\x37\xa2\x3c\x13\xd8\x15\x89\x2a\x61\x3f\xf8\x51\x71\x7d\x64\x1e\x16\xb0\x08\x48\xf2\x73\x55\x7b\xcd\xdc\x81\x4d\xe6\x95\xea\xb6\x5c\x24\xd3\x6f\xe8\x8e\x5a\xdb\xb4\x60\x2e\x70\xe9\xfb\x9e\xb5\x12\x28\x50\xa6\xac\xf2\x24\xe2\x97\x5e\x8f\x16\x75\xc9\x0d\x1a\x5d\x37\x4d\x21\xa2\xb5\xe6\x80\x21\x00\xfc\xc1\xc3\x69\x74\x15\x18\x15\x2a\xe4\xca\xdc\x66\x5d\x83\x2b\x99\xb8\xd6\x88\xd0\xa0\x8d\x72\x0c\x4a\xc5\x83\x02\xe0\xa7\x81\x9f\xe1\xdc\x65\xac\x76\x8a\xd5\x96\xae\xaf\x7e\xf9\xf9\xf2\x7c\x42\x69\x4b\x3f\xbd\xd4\x83\xde\xba\x9d\xc5\x84\xe9\x0e\x89\x62\xcf\x66\xf3\xf9\xd2\x7c\x23\x2c\x77\xbe\x11\x6a\x92\xb1\xb0\x61\xee\x85\x49\xfc\x31\x70\x69\x6b\x5b\xce\x7a\x82\x17\x60\x55\xc2\x75\xb2\x82\xff\x24\x4d\xc4\xb1\x6c\x45\x80\x08\x6d\xfb\xb1\x9f\xc2\x75\x7c\x00\xbe\xc2\x61\x66\x8a\x92\x09\x0d\xa7\x88\x06\x71\xac\xdd\x65\x17\x4c\x7f\xc5\xfb\xb1\x99\x26\xff\x96\x6b\x99\x2a\x09\x31\xdd\x50\xf3\xef\xf2\xf9\x34\xe8\x86\x8d\x36\x26\x1d\x91\x02\x8d\xf4\xa2\x87\x42\x13\x15\xb2\x6f\x8b\xe7\x5a\x9c\xfa\x9e\x9d\x4f\xbd\xf0\xb4\xa7\x66\x32\xf3\xca\xf4\x9a\x6e\xae\x13\xa3\x48\xf3\x45\x3a\xb6\x88\x39\x45\xc6\x06\x05\xf3\x22\x33\x88\xb3\x4c\x23\x74\x28\xc1\xe4\x4c\x64\x5e\x06\xc6\x00\x55\x3a\xe9\xc9\x07\xed\x21\xe6\xb1\xbb\xab\x35\x5b\xd9\x7a\x1f\x2f\xca\x32\xaa\x99\x90\xdb\x45\xc9\x5a\xbc\xd3\x0e\x54\xd2\x19\x6c\xc5\x41\x76\xb3\x06\xc3\x86\x65\xab\x2b\xe1\x2c\x10\xdc\x0a\x0e\xc1\x87\x42\x4a\x06\x21\xbd\x19\xe2\x4c\xdc\xfd\x7b\x2a\x62\xaa\xd0\xe0\x04\x14\x3e\xc0\xb9\xc8\x0a\xf2\xba\x89\x31\xaf\x56\xab\x2c\x50\x39\xda\xa4\xda\xf4\xb6\xb3\x26\xcc\x2a\x97\xca\x2b\x86\x44\xba\x98\x17\xd0\x9e\x63\xca\xcd\xda\xf2\x51\xbd\xf2\x2a\xca\xd8\x7f\x4f\x8f\x99\x1b\xb9\x3c\x92\x89\xbc\x40\x09\x8b\xe6\x8c\xc2\x8c\xfc\x8f\x51\x99\xf6\xec\x60\x96\x15\xa1\xb1\x00\xa8\xf2\xa2\x24\xdb\xd8\xce\x24\xe3\x2d\xc4\xf9\x83\x68\x70\x33\xe9\xeb\xa3\x8a\x51\xa1\x08\xb6\x37\x58\x48\x73\x71\x6a\xd6\x32\x20\xd2\xd9\xb8\xce\xd6\x9c\xfd\xc2\x0e\xe5\xbf\xb9\xd8\x6f\xf3\x4a\xc6\x7c\x5b\x87\x9a\xfb\xfc\xb5\x00\xa5\xfc\xc9\xfe\xfa\xd3\x86\xfe\x15\x51\x40\x4d\xd2\xb2\x71\x27\x6c\xbf\x83\xc5\xd2\xc0\xc2\x49\x08\xa6\x5f\x1c\x16\x95\x66\xa9\xa8\x7b\x16\xf3\x69\x62\xfa\xec\x92\x84\xe6\xcf\x58\x25\x78\xc5\x8e\x02\x19\x1e\x38\x87\x59\x96\x15\xf7\xf4\xf8\xe6\xc5\x3c\x15\xb7\x88\x64\xfe\x7a\x80\x5a\x82\x66\x16\xce\xe6\xf5\x22\xd0\xe6\x9a\x57\x0f\x95\xc1\x4b\x88\x2f\x3b\x9b\x4a\xe6\xd7\x0f\x92\x58\x21\x34\xa3\xd0\x04\x35\xe4\x36\xb7\x94\xc2\x28\x6c\xc8\x0b\xf9\xcd\x23\xbf\xbc\xd9\xeb\x57\xd7\xaf\xae\xe5\xf3\x92\x16\x36\x27\x99\xd4\x69\x4e\x7f\x6e\x7c\x42\x75\x87\x95\x83\xa3\x17\x57\xab\xff\x03\x00\x00\xff\xff\x5f\x3b\x2c\x13\x8e\x09\x00\x00")

func dragonfileTomlBytes() ([]byte, error) {
	return bindataRead(
		_dragonfileToml,
		"Dragonfile.toml",
	)
}

func dragonfileToml() (*asset, error) {
	bytes, err := dragonfileTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Dragonfile.toml", size: 2446, mode: os.FileMode(420), modTime: time.Unix(1485840295, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"Dragonfile.toml": dragonfileToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"Dragonfile.toml": &bintree{dragonfileToml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

