// Code generated by go-bindata.
// sources:
// assets/raw/Gamefile.toml
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _gamefileToml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x54\xc1\x6e\xdc\x38\x0c\xbd\xfb\x2b\x08\xcf\xc1\x97\x85\x91\x45\x2e\xb9\xcc\x69\x93\xdd\x4b\x76\x17\x4d\x8a\x5e\x06\x41\x41\x5b\xb4\xad\x46\x96\x1c\x91\x9e\xe9\x20\xc8\xbf\x17\x94\x34\x93\x49\xd1\xde\x2c\xea\xf1\xf1\xf1\x89\xf4\x06\x6e\x23\x8e\xc1\xdf\x92\xa0\x75\x0c\x1d\x32\xc1\x60\x1d\x55\xd5\x06\xfe\xc1\x99\xc0\x93\x1c\x42\x7c\x86\x3e\xf8\xc1\x8e\x6b\x44\xb1\xc1\xb7\xd5\xce\x93\x3c\x29\xe8\xaf\x09\xfd\x48\x20\x13\xc1\x12\xa2\xa4\x8f\x51\x13\xe3\xea\x19\x82\xaf\xf4\xf0\x35\x5d\x6d\xe1\xe6\xea\xe6\xea\x37\x39\x4c\x71\x4f\x11\x96\x68\xf7\x28\x25\x5e\x28\x5a\xf8\x3c\x59\xfe\x78\x65\xf5\xc2\x1d\xab\x8d\x0a\xf3\xd4\x0b\x76\x8e\x60\x88\x61\x4e\x6c\x33\xf6\x93\xf5\x04\x53\x60\xb1\x7e\xbc\xac\x80\xde\x68\xb6\x46\x94\x01\x0e\x78\x04\x09\xc0\xe4\x4d\xb5\x81\xe6\xf1\xee\xe1\xcb\xdd\x43\x03\x33\x31\xe3\x48\xac\x77\xe8\x1c\xcc\x34\x53\x47\x91\x21\x0c\xe7\x1e\x5b\xf8\x5f\x26\x8a\x20\x13\x7a\x90\xc9\xf2\x1f\x60\xa5\xc9\xdc\x8c\x33\x55\x1b\x40\x3e\x09\x4c\x32\x42\xbe\x13\xf4\x06\xa3\x49\xad\xb4\x55\x69\xec\xc2\xa4\x3f\xd5\x59\x17\x46\xcd\x15\xb4\x9e\x81\x49\x94\x81\x81\x17\xea\xed\x60\xfb\x13\x97\x0b\xe3\x48\x11\x86\x10\xb3\x9f\x31\x7c\xa3\x5e\x80\xd7\x7e\xd2\xe2\x33\x7e\xb7\xf3\x3a\x17\x3a\x47\x7b\x72\xc9\x81\xb0\xca\xb2\x0a\x08\xc6\x91\x84\xdb\x6a\xe7\xc2\xf8\x54\x55\x50\x20\x5b\xa8\x0d\x75\xeb\x58\x6b\x68\x03\xb7\x34\xa8\x9b\x4a\x51\x32\x52\xf8\x5e\xcf\xc7\x85\x54\x26\x5b\x16\xf5\xa6\x09\xdc\xa4\x0a\x8d\x8e\x51\xa3\x6f\x47\x39\xa8\x48\x86\x1e\x3d\x4c\xb8\x27\xc0\x42\x05\x61\x48\x64\x0d\x8b\x09\xab\x94\x64\x16\x43\x31\x36\x70\x98\xac\xcb\x93\x72\x46\xa7\x53\x66\x2f\x9c\x3c\x85\xd5\x19\xe8\x08\xc8\xea\x83\x24\x3e\x84\x48\x0e\xc5\xee\x09\x16\x94\xe9\xc2\xaf\x34\xe0\x10\x22\x60\xc7\xc1\xad\x92\x01\x2d\xfc\xbb\x3a\xb1\x8b\xfb\xd0\x27\x60\xa4\x44\xc7\xeb\xa2\xef\x43\xa6\xad\x00\x76\x6a\x57\x5b\x20\x4f\xc9\x37\xc8\x4e\x6c\xa1\x0e\x5c\xe7\x73\x16\xbc\x85\x3a\x77\x56\xa7\x75\x29\x6b\x94\x7b\x32\x28\xa8\x2b\xd7\xc2\xdf\x2a\x07\x5c\x31\xf1\x5c\xec\x8c\x60\x58\x1c\xe9\x72\xf6\x13\xf5\xcf\x9a\x5c\x6d\xe0\x60\x9f\x6d\x36\xd8\xd0\x80\xab\x93\x33\x5c\x27\xfc\xf1\xd3\xbd\x15\x6a\xab\xdd\xb9\x8a\xd1\xb7\x0d\xcb\x4c\x5e\x92\x66\x34\xb8\x08\xc5\x24\xf1\xc5\x59\xa1\x6b\x55\x6e\x3a\xaf\xfb\xbb\x85\xfa\xf5\x55\x7f\x01\xff\xe1\x4c\x6f\x6f\xad\xe9\xae\xcb\x34\x5c\xa4\xcd\x47\x7e\x71\xf5\xcf\xd1\x25\xb0\x8c\x91\xb8\xe0\x57\xce\xe1\x8c\x5b\x90\xf9\x10\xa2\x79\x8f\xfc\xba\x60\x49\x66\x76\x73\x30\x74\x5a\xf8\x34\xe8\x27\xfe\x77\x77\x3e\x40\x75\x78\x2d\xeb\x0f\xa1\xae\x7e\x04\x00\x00\xff\xff\xd5\xd9\xdb\x0b\xe1\x04\x00\x00")

func gamefileTomlBytes() ([]byte, error) {
	return bindataRead(
		_gamefileToml,
		"Gamefile.toml",
	)
}

func gamefileToml() (*asset, error) {
	bytes, err := gamefileTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Gamefile.toml", size: 1249, mode: os.FileMode(420), modTime: time.Unix(1474140080, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"Gamefile.toml": gamefileToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"Gamefile.toml": &bintree{gamefileToml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

