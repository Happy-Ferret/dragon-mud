// Code generated by go-bindata.
// sources:
// assets/raw/DragonInfo.toml
// assets/raw/Dragonfile.toml
// assets/raw/test.toml
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dragoninfoToml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x53\x4d\x6b\xdb\x40\x10\xbd\xeb\x57\x0c\xce\xa5\x0d\x46\xf4\x6c\xe8\x21\xe0\x1e\xdb\x1e\x9a\x1c\x8a\x31\x61\xad\x1d\x59\x43\xb5\x1f\xdd\x0f\x39\x21\xe4\xbf\x77\x76\xb4\x4e\x55\x17\x43\x08\x04\xef\x6a\xe6\xcd\x9b\xf7\xde\xde\xc0\xcb\x8b\x1f\xf3\x91\xec\xa3\x55\x06\x5f\x5f\xa1\x73\xb6\xa7\x63\x0e\x2a\x91\xb3\xd0\xd3\x88\x4d\x53\x3e\xc1\x67\x58\x5d\xd4\xae\x9a\x09\x43\x2c\x65\xfc\xed\x53\xcb\x7f\xab\x46\x63\xec\x02\xf9\x54\x6f\xb7\x72\x3c\xe0\x7f\x63\x06\x0c\xd8\xae\x9a\xe6\x06\xee\x07\x8a\x10\xb1\x93\x16\x8d\x49\xd1\x18\x21\xe0\xef\x4c\x01\x0d\xda\x14\x21\x0d\x2a\x41\x1c\x5c\x1e\x35\x30\x94\xc1\x04\xbd\x0b\x7c\xcd\x8d\x33\x2a\x24\x07\x27\x17\x7e\xb5\x8c\xf7\x23\x77\x03\xa8\x37\x08\x0d\x86\x2c\x99\x6c\x60\x1b\xd4\xd1\xd9\xaf\x0f\x5b\xa8\xb4\xd7\xc0\x28\x1a\x3d\x5a\x8d\xb6\x23\x8c\x72\xe1\x12\x73\x63\x9c\x98\xbd\x77\x21\x31\xc0\x92\x4c\xdb\xec\x96\xc7\x7d\xd3\x00\xd4\x1d\x7a\x42\x26\xa8\xb1\x27\x8b\x85\x34\xbe\x4d\x3e\xcb\xe4\xfa\x42\xc2\x1d\x85\xc4\x92\x3e\xff\xea\x9c\xf1\xac\xf9\x81\xf5\x2e\x88\x27\x4a\x43\x2b\xbf\xbe\x7d\xbf\xff\xb2\xa9\x0b\x23\x24\x62\x2b\x0e\x48\xf6\xb8\x96\xb3\xb3\xe3\x33\x4c\x6a\x24\x5d\xfe\x67\x14\x61\x0b\xde\x2d\x37\x6b\xd9\xf8\xd1\x64\x5d\xbc\xb8\x15\xb9\xb7\xc2\x4f\x7a\x71\x12\x79\x9f\x5d\x0e\x67\x22\x68\x88\x6f\x94\x2d\x4b\xb3\x22\x13\xc6\x16\x1e\x22\xf6\x79\x14\x06\xda\x75\xb9\xec\x2d\xe1\x60\x30\x9f\x83\x77\xb1\x14\xdd\x71\x8b\xe0\xc1\xc0\xda\x2b\x90\xc8\x14\x9c\x65\x20\x44\xa1\xf6\x5f\xc7\x67\x5f\x19\x8b\x83\x17\x29\x15\x8d\x76\xbb\x42\x83\x95\xdf\xef\xe1\xc3\x35\x92\x1f\x05\x7d\xc7\x6e\x74\x48\xd3\xb2\x96\xb1\x24\x31\xcb\x16\x1e\x88\x4f\x9e\x47\xb2\x9d\xd1\x71\x82\x06\x56\x10\x70\x8c\x58\xa2\x53\x00\xd9\xd8\xb9\xbd\x5a\x8a\x4f\xca\xf8\x6a\xc6\x82\x90\x9c\x01\xce\x2f\xa2\x56\x6d\x7a\x0a\x31\xad\xea\xc7\x8b\x37\x20\xeb\xd2\x9c\x08\xa9\x3b\x63\x43\x45\x9d\x85\x6b\xa5\xfd\x9d\xf3\x58\x3d\x67\xf5\x95\x81\x3f\xf9\x81\x28\x2b\x39\xbe\x3a\xaa\xce\xf9\xab\xde\xc5\x20\x75\xc2\xa2\xd3\x46\xea\xaf\xcc\xb9\xb3\xd5\x72\x91\x9b\x37\xac\x4d\x6b\xb1\x86\x03\xcd\xcf\xa0\x0f\xce\x88\xe2\x27\x09\x66\x51\x9c\xa7\xff\x09\x00\x00\xff\xff\x6b\x8c\xf2\x86\x77\x04\x00\x00")

func dragoninfoTomlBytes() ([]byte, error) {
	return bindataRead(
		_dragoninfoToml,
		"DragonInfo.toml",
	)
}

func dragoninfoToml() (*asset, error) {
	bytes, err := dragoninfoTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "DragonInfo.toml", size: 1143, mode: os.FileMode(420), modTime: time.Unix(1487823077, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dragonfileToml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x56\x4f\x6f\x1b\xb7\x13\xbd\xeb\x53\x0c\xec\x83\x2e\xfe\x09\x4e\x7e\x46\x93\x06\xf0\x21\x8d\x73\x30\xd0\xc6\x45\x92\x16\x28\x8c\xc0\xa0\x76\x67\xb5\x4c\xb8\xa4\x4a\x72\xa5\xa8\x41\xbe\x7b\xdf\x0c\xb9\x6b\x29\x69\x50\xa0\x8e\xc8\xd9\xf9\xf7\xde\xbc\xe1\x39\x7d\xf9\xb2\x31\x03\x3f\x64\x9b\x1d\x7f\xfd\x4a\x6b\x93\x98\x9a\xe0\x3b\xbb\x19\xa3\xc9\x36\x78\xea\xac\xe3\xc5\xc2\xc3\x8a\xae\xe9\xec\xd4\xfe\x6c\xb1\xe3\x98\xc4\x0a\x57\x97\x2b\xfc\x77\xb6\x58\x7c\xe7\xd4\x73\xde\x87\xf8\xe9\xd4\xef\x6a\x71\x9f\xd9\xe1\xea\xc3\x62\x41\x74\x4e\xb7\x3e\x73\xec\x4c\xc3\x64\x13\xe5\x9e\xc9\xb4\x6d\xe4\x94\xe8\x10\x46\xda\x1b\x9f\xf5\x30\x71\x44\x44\xca\x81\xd6\xd6\xb7\xf8\xbb\xa2\x5f\x0e\xd4\x72\x67\x46\x97\xc9\xe6\x65\x52\x67\x67\x2e\x34\xc6\xf5\x21\xe5\x33\x5a\x8f\x72\x41\x8d\xf1\x64\x5c\xc2\x87\xe2\x25\x8b\x8b\x92\x31\x72\x26\x93\x68\xcf\xce\x51\x88\x64\x7c\x40\xa0\x48\xb7\xbf\x4f\x19\xa8\xc7\xac\x1f\x9a\xa6\xc1\x81\x5d\x3b\xa6\x2e\x86\x81\xc2\x98\x93\x6d\xf9\x28\xb5\x15\xac\xed\x5c\xca\xf5\x71\x26\xa5\xce\x57\xbd\xf1\x9b\xf2\xc5\x36\x44\xa9\xca\xe4\x6f\x1b\x16\x47\x9f\x28\x78\xd8\xab\xc9\x35\x3d\xbf\x7c\x7e\xf9\xa3\xcf\xe7\xa6\x6c\xa3\xdd\x99\x5c\xcf\xab\x8b\x15\xbd\xef\xd1\xcf\x93\x2b\x2b\x17\xee\xa0\xee\x00\x89\xe7\x26\x9b\xb9\x22\xf1\x37\x98\xa6\xb7\x9e\x49\xb2\xb6\x7e\x73\x1c\xc3\xa0\xe9\x15\x1f\xf1\x01\x60\x0e\xd2\x9a\xc4\xbe\x55\x7f\xcb\x77\xaf\xdf\xfe\xf9\xfa\xed\x92\x06\xf4\xc9\x6c\x38\xc9\xad\x41\x67\x07\x1e\x78\x0d\xae\x50\xe8\xf4\x6b\xa9\x77\x45\x77\xda\x6a\xb4\xc0\xe3\x7f\x36\x5d\x28\x82\x25\x1e\xee\xd5\x23\xa0\xa9\x49\x6a\x2a\xa1\xdc\x66\x24\x62\x62\xab\x05\xad\xd4\xee\xfd\xdd\xcd\xdd\x0b\x7a\x99\x92\x70\x06\xe6\x82\x53\x3e\xc8\x5d\x2d\xfe\xe1\xb1\x97\x4f\x84\xa4\xef\x38\x8b\xcb\x44\x69\xcb\x8d\xed\x6c\x33\x3b\x6f\xa2\xdd\x6a\x34\xc5\xb6\x26\xcc\x9f\xb9\x19\x75\x20\xea\xc1\x36\x86\x4d\x34\x03\x78\x3c\x7f\x50\xa9\xac\x2d\x4f\x92\x31\xac\x91\x7c\x36\xd6\xcb\x81\xc4\x4b\x14\xd9\xf1\x4e\xf9\x1c\x6a\x57\xff\xa7\x71\x8a\x97\xc7\x38\xab\x47\xbc\x25\x97\x9d\x71\x23\xda\x89\x7e\xb1\x72\xb9\x37\x3b\xa6\x36\x1a\x40\xd4\x08\xda\xd9\x62\x40\xb9\xeb\x10\x16\xb1\x94\xad\x8d\x89\xdc\x8d\x8e\xf6\x3d\x7b\x75\x36\x84\xd6\x76\x07\xf1\x36\x63\x5d\x47\x27\x49\xb4\xfb\x92\x8e\x56\x31\xd7\xd1\x32\xc8\x3c\x80\x0e\x88\x1d\xf6\xe0\x86\x17\xc4\xb3\x71\x13\x25\x58\xf2\x63\x45\x0d\xa9\x21\x24\x6d\x42\x85\x6a\xcd\xab\xea\xea\x56\x70\xed\x05\x31\x39\x36\xce\xf8\x86\x2f\x4e\xd3\x04\x55\x43\x28\xfe\x27\x97\xfb\x30\xba\x56\x4c\xf6\x28\x53\x6c\x2e\xaa\x3b\xa3\xb3\x4f\xce\x66\x0c\x0c\xed\x2d\x08\x86\x49\x55\x09\xf0\xb4\x35\x31\xcf\x3c\x4b\x07\x7c\x39\xd0\xdf\x23\x8f\x92\xd4\xb8\xd5\x6f\xf7\xc6\x0a\x5e\xab\xb9\xd0\xb9\x11\xa5\xcf\x12\x10\xf5\x39\x34\x93\x5b\xa1\xa0\x01\x21\xfd\xa3\x91\xc8\x64\x8b\x09\xa0\xcc\x65\x44\xda\x31\xe2\x4f\x75\xd7\xf2\x8e\x5d\xd8\x0e\xec\x33\xe4\x09\xf2\xd3\x31\x3b\xb4\x9c\x59\xa7\xa1\xfd\x38\x26\x95\xa4\x0e\x72\x03\x75\x8b\xa0\x2b\xb7\x69\x4a\xe6\xcd\xdd\xfb\xd7\x2f\xe8\xad\xdd\xf4\x99\x3c\x3a\x2e\x83\x51\xb3\xc2\x3f\x50\x5f\xe7\xc6\xcf\x6a\x5b\xda\x04\x5e\x07\xf7\x90\xec\x3f\x22\x37\x4f\x2e\x85\xda\x37\xd1\x6c\x82\xff\xed\x8f\x1b\x1a\x53\x41\x86\x5e\x46\x9c\x3c\xb5\x98\xc3\xdc\x87\x56\x43\xb3\x6f\xe2\xa1\x10\x7d\x6b\x52\x82\x44\x23\x89\x02\xba\x95\x8a\xcb\x6c\x2f\xce\x67\xdd\x2e\xb2\x83\x49\x0e\xf1\x40\x1a\x70\x9a\x8d\xea\x09\x0d\x51\x64\x70\xe4\x90\x5c\xee\x27\x83\xce\x7a\xe3\xe0\x09\x7a\xb9\x1d\xb3\x04\x61\xec\x99\x4a\x69\xc0\xef\x97\x99\x5a\x11\xb6\x18\x46\x95\x8c\x4f\xcc\xdb\x59\x07\x94\xf4\x17\x2a\xe4\x73\x27\x17\x2a\xc9\xcd\xac\x86\xc3\x8a\x6e\xa9\x47\xd3\x20\x4a\x91\x9b\x30\xa0\xfb\x6d\x11\x57\x59\x20\x6d\x20\xd1\x75\xa9\x75\x6f\x91\x97\x7c\x41\xa3\x77\x75\xc1\xc0\x9b\xce\x13\x60\xce\x31\x08\x4f\x7c\x0b\xb1\x12\x95\x91\x4f\xa6\x32\x75\xba\x04\xb9\xde\x88\x86\xca\x8c\x03\x77\x51\x99\x7b\x6d\x40\xa8\x02\x30\xb5\xf3\xa1\xf4\x6a\x02\xe7\xea\xf2\xe7\x9f\x4e\xef\x6b\x97\xae\xe9\xff\x4f\xcb\x80\x5a\xff\x60\x31\x6f\xba\x21\x93\x9c\x97\x63\xf3\xf9\xf4\xf8\xb9\xa0\xec\xc2\xe6\x5b\x75\xf9\x0f\x35\x83\x15\xda\xaa\x80\x57\xd5\xfa\x28\x45\xa4\xb1\xe9\x85\xd8\x70\x6d\x87\x71\xa8\xee\x9c\x30\x57\x31\x2c\x48\x51\x36\x71\xc3\xa2\x0e\xf7\xb8\xd6\xea\x8a\x09\x16\x5b\xcb\xeb\x71\x53\x97\xda\x0d\x77\xb2\x30\xc4\x45\xfd\x42\x8f\x7f\x95\xdf\x87\xad\xbe\x28\x92\x4d\x65\x2a\x97\x45\x4f\x8c\x5b\x6a\xa0\xa5\xbc\x2f\x96\x17\x9a\x9c\xda\x1e\xdd\xd7\x5a\xb8\xae\xe0\x09\xcc\x7d\x55\x4f\x09\x37\xe5\x89\xb9\xa2\xe9\x43\x08\x1e\x7c\x56\xcf\x98\x46\x20\x2f\x34\x03\x39\x9b\x3c\x82\x87\xe2\x4c\xee\x84\xe6\x4d\x64\x23\x33\x2e\x62\x9c\x43\xd4\x1a\x52\x91\xde\xdb\x4e\xa3\x35\x7d\x08\xe9\x24\x2d\x93\xca\xd8\xba\x5a\x9e\x26\xef\xb5\x82\x32\xa7\xda\x6c\xed\x83\x48\xb5\x3a\x83\x88\xb1\xd5\x6d\x77\xe4\x08\x66\x4b\x8e\x31\xc4\xa5\xa4\x0c\x40\x06\xb3\x4d\x13\x70\x77\xef\x68\x99\x72\x8b\x02\x6b\xa3\xf0\x03\xc6\xcb\xc2\xa0\xa0\x8f\x0c\xcc\xab\xd5\x2c\x97\xc8\x1c\x65\x52\x67\x06\xeb\xac\x89\x13\xcb\x25\x73\x28\xb8\xb1\x2e\x95\xdd\xba\x86\x60\x95\x62\x6d\xf3\x49\xad\xca\x96\x2d\xbd\xff\x1e\x1e\x33\x15\x72\x7a\x25\x13\x79\xd2\x25\x08\xcd\x11\x84\xa5\xf3\x3f\xee\x4a\x7d\x42\x6c\xcd\x2c\x11\xea\x0b\x0d\x55\x5c\x14\x64\x9b\xfa\x09\x64\x3c\xf3\x64\x3d\x09\x07\x57\x95\x5f\x1f\xe6\x2d\x85\xf5\x3e\x18\x08\xd2\x94\x9c\x1e\x6b\x1a\x20\xe9\x74\x78\x56\x4e\x4b\xf4\x93\x73\x30\xff\xd5\x89\xbe\x4d\xaf\x0d\xcc\xb7\xf5\xc8\x79\x28\xcf\x60\xa4\xf2\x86\xc3\xd5\xc7\x15\xfd\x25\xa4\x00\x9b\xa4\xe4\xb2\xad\x76\x16\xa2\x21\x72\x0f\x67\xfa\x50\x9e\x59\x5a\xa8\xa2\xe6\x85\xcc\x87\x8a\xf4\xd1\x47\xe2\xba\x6c\x7d\xd6\x55\x2d\xdb\xdc\xcb\x36\x39\x3f\x7e\x57\x16\x61\xae\xc9\xcd\x24\x99\x16\x12\x72\x89\x1a\x59\x30\x9b\xe4\x45\x5a\x5b\x72\x5e\xdc\xb7\x06\x8f\x3c\x6c\xad\xd5\xd1\x72\xd2\x16\x9a\x51\x60\x02\x1b\x4a\x99\xd7\x94\xe3\x28\x68\xc8\xe3\xef\x9b\xf7\xeb\xfc\x1c\x3d\x7b\x76\xf5\xec\x4a\x7e\xcf\x61\x71\xe6\x25\x92\x1a\x4d\xe1\x8f\x0f\x1f\xbb\xfa\x00\xc9\x29\x9b\xea\xdf\x00\x00\x00\xff\xff\x7c\x71\x5f\x1b\x7e\x0c\x00\x00")

func dragonfileTomlBytes() ([]byte, error) {
	return bindataRead(
		_dragonfileToml,
		"Dragonfile.toml",
	)
}

func dragonfileToml() (*asset, error) {
	bytes, err := dragonfileTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Dragonfile.toml", size: 3198, mode: os.FileMode(420), modTime: time.Unix(1487813417, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testToml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\x56\x28\xc9\xc8\x2c\x56\x00\xa2\x44\x85\x92\xd4\xe2\x12\x85\xb4\xcc\x9c\x54\x2e\x40\x00\x00\x00\xff\xff\xab\x7a\x46\x4b\x16\x00\x00\x00")

func testTomlBytes() ([]byte, error) {
	return bindataRead(
		_testToml,
		"test.toml",
	)
}

func testToml() (*asset, error) {
	bytes, err := testTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test.toml", size: 22, mode: os.FileMode(420), modTime: time.Unix(1487825017, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"DragonInfo.toml": dragoninfoToml,
	"Dragonfile.toml": dragonfileToml,
	"test.toml": testToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"DragonInfo.toml": &bintree{dragoninfoToml, map[string]*bintree{}},
	"Dragonfile.toml": &bintree{dragonfileToml, map[string]*bintree{}},
	"test.toml": &bintree{testToml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

