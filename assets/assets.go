// Code generated by go-bindata.
// sources:
// assets/raw/Gamefile.toml
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _gamefileToml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x54\x41\xab\xdc\x46\x0c\xbe\xfb\x57\x08\x3f\xca\x5e\x8a\x79\x25\x97\x50\xd8\x43\x9b\xa4\x25\x90\xf2\xda\x24\xf4\xf2\x08\x41\xf6\xc8\xf6\xf4\x8d\x47\xce\x48\xde\xed\x52\xf2\xdf\x8b\x66\x66\xf7\xed\x96\x06\x9f\xac\x91\x3e\x49\xdf\x27\xe9\x0e\xbe\xfb\x67\xc2\x85\x3e\xab\xd7\x40\x5f\xa1\x47\x21\x18\x38\x8e\x7e\xda\x12\xaa\xe7\x08\xa3\x0f\xd4\x34\x77\xf0\x2b\x2e\x04\x91\xf4\xc8\xe9\xe9\xd6\xa5\x6b\x1e\x23\xe9\xa7\xa6\x01\xb8\x83\xb7\x51\x29\x8d\x38\x10\x78\x01\x9d\x09\xd0\xb9\x44\x22\x70\xe2\x0d\x8e\x18\x35\x1b\x85\xd2\x81\x12\x28\x43\xef\xa3\x03\xe5\x0e\x7e\x3e\x81\xa3\x11\xb7\xa0\xe0\x75\x27\x19\xac\x0d\x3c\x60\x98\x59\xb4\x85\x7e\xb3\x07\x18\x30\x02\x06\x61\xe8\x0d\x45\x0d\xa2\xbd\xef\xf2\xd7\x02\x0a\x1c\x29\x04\xe0\x04\x18\x59\x67\x4a\xf0\xf6\xf7\x73\x05\x19\x51\x73\x20\x0e\x03\x89\xf8\x3e\x10\x8c\x89\x17\xe0\x4d\xc5\x3b\xba\x2a\xad\x6b\x00\xfc\xa5\x95\xfd\x75\x25\xa5\xcf\x57\x33\xc6\xa9\x44\xac\x9c\x4a\x57\xc6\x24\xa4\x2d\x0a\x70\x6c\xa0\xd8\xf7\xf0\xf2\xfe\xe5\xfd\xb7\x63\x2a\x13\x6b\xf2\x07\xd4\x6a\xaf\x10\x1d\x7c\x9c\xbd\xdc\x3e\x79\x7b\x08\xa7\x0c\x37\x70\x8c\x34\x28\x5e\xda\x30\xbc\x05\x87\xd9\x47\x02\x2b\xd5\xc7\xe9\x3a\x07\x46\x77\x16\xc5\x30\xe0\x88\x27\xe3\x43\x28\xba\x8c\xb7\xfb\xf0\xe6\xfd\x9f\x6f\xde\xef\x60\x21\x11\x9c\x48\xec\x15\x43\x80\x85\x16\xea\x29\x09\xf0\x78\xe9\xb3\x83\x87\xcc\xaf\xce\x18\x41\x67\x2f\xdf\x67\xd9\x4a\x3e\x5c\x28\x23\xa2\x9c\x8b\xcc\xa5\x70\x79\x55\x8c\x0e\x93\xcb\x0d\x75\xd9\xef\xe3\xc3\xeb\x87\x1f\xe1\x27\x11\x1b\x94\x48\x59\x1c\x3d\x95\xb7\xda\xfe\xe7\x67\x36\x7f\xb0\x71\x0c\x3c\x19\xb6\xa2\x8f\x62\x83\x60\x19\x04\x64\xa5\xc1\x8f\x7e\x38\xe7\x0a\x3c\x4d\x94\x60\xe4\x54\x58\x4f\xfc\x17\x0d\x0a\xb2\x0d\xb3\x15\xb7\xe0\xdf\x7e\xd9\x96\x0a\x17\xe8\x40\x21\xb3\xc4\x9b\xae\x9b\x82\x62\x9a\x48\xa5\x6b\x1e\x03\x4f\x79\xbe\x8b\xcb\x1e\x5a\x47\xfd\x36\xd5\x51\x78\x4d\xa3\x31\x6e\x10\x35\x22\x9b\xdf\xd9\xff\x69\xcd\xfb\x24\x5e\xd4\xd8\xdb\xb1\xec\x72\x86\x9d\xad\xd5\xce\x14\xa6\x62\x34\x4f\xc9\xd3\x3d\xe3\x81\x00\x2b\x14\xf0\x58\xb4\x11\x75\xbc\x69\x0d\x16\x75\x94\xd2\x0e\x8e\xb3\x0f\x65\x9e\x2e\xde\xf9\xaf\xa0\x57\x4c\x99\x79\x0b\xce\xc6\x9e\xbc\x49\x56\x94\x81\x44\x01\xd5\x1f\x08\x56\xd4\xf9\x8a\xaf\xbc\xf0\x79\x83\x7a\xe1\xb0\x69\x71\xe8\xe0\xb7\x2d\xa8\x5f\xc3\x4d\x9f\x80\xa9\x08\x2d\xdb\x6a\xfa\x90\x33\xcd\x1e\x8d\xae\xae\xba\x7c\xca\xbc\x41\x61\x62\x0f\x2d\x4b\x5b\xfe\x4b\xc1\x7b\x68\x4b\x67\xad\x89\xfa\xaa\x9e\x95\xd2\x93\x43\x45\x3b\x48\x1d\xfc\x62\xe5\x40\xa8\x24\x5e\x92\x5d\x3c\x04\xd6\x40\xf9\x74\xcd\x34\x3c\x59\x70\x73\x07\x47\xff\xe4\x0b\xc1\xe7\xbb\x72\x76\xb7\x2d\xf8\xf0\xc7\x3b\xaf\xd4\x35\x8f\x97\x2c\xce\xb4\xe5\x75\xa1\x58\x6e\x19\x3a\x5c\x95\x52\x2e\xf1\x4b\xf0\x4a\x2f\xac\x72\xd7\x47\xdb\xf2\x3d\xb4\xf5\x72\xda\xef\xd7\xce\xf5\x2f\xea\x34\x5c\x85\x2d\x27\xf9\x12\xda\xff\x5a\x57\x16\x9d\x12\x49\xf5\xdf\xa4\x98\x8b\xdf\x8a\x22\x47\x4e\xee\xd9\xf2\xff\x09\x6b\xb0\x48\x58\xd8\xd1\xf9\x2c\xe4\x41\x3f\xe3\x3f\xb3\x73\xe3\x6a\xc3\xeb\xc5\x8e\x46\xdb\xfc\x1b\x00\x00\xff\xff\xd7\xa7\xc8\x0d\xff\x05\x00\x00")

func gamefileTomlBytes() ([]byte, error) {
	return bindataRead(
		_gamefileToml,
		"Gamefile.toml",
	)
}

func gamefileToml() (*asset, error) {
	bytes, err := gamefileTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Gamefile.toml", size: 1535, mode: os.FileMode(420), modTime: time.Unix(1474845069, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"Gamefile.toml": gamefileToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"Gamefile.toml": &bintree{gamefileToml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

