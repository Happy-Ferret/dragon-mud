// Code generated by go-bindata.
// sources:
// assets/raw/Gamefile.toml
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _gamefileToml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x54\x4f\x6f\xdb\x3e\x0c\xbd\xe7\x53\x10\xe9\xc1\x97\x1f\x8c\xfe\xd0\x4b\x2f\x3d\xad\xdd\x2e\xdd\x86\xb5\xc3\x2e\x45\x31\xd0\x16\x63\x6b\x95\x25\x4f\x94\x93\x05\x45\xbf\xfb\x48\x49\x49\xd3\x61\x3b\x24\x30\xff\x3d\x3e\x3d\x52\x3a\x83\xeb\x88\x43\xf0\xd7\x94\xd0\x3a\x86\x0e\x99\x60\x63\x1d\xad\x56\x67\xf0\x01\x27\x02\x4f\x69\x17\xe2\x13\xf4\xc1\x6f\xec\xb0\x44\x4c\x36\xf8\x76\xf5\x20\xfe\x47\x4d\x7a\x37\xa2\x1f\x08\xd2\x48\x30\x87\x98\xf2\xc7\xa0\x85\x71\xf1\x0c\xc1\xaf\xd4\xf8\x9e\x43\x57\x70\x79\x7e\x79\xfe\x8f\x1a\xa6\xb8\xa5\x08\x73\xb4\x5b\x4c\xd5\x5f\x21\x5a\xf8\x3a\x5a\x7e\x1b\xb2\x1a\x70\x7b\x01\x13\x62\x9e\xfa\x84\x9d\x13\xe6\x31\x4c\x19\x6d\xc2\x7e\xb4\x9e\x60\x0c\x9c\xac\x1f\x4e\x3b\xa0\x37\x5a\xad\x1e\x45\x80\x1d\xee\x21\x05\x89\x7a\x23\x68\xcd\xfd\xcd\xdd\xb7\x9b\xbb\x06\x26\x62\xc6\x81\x58\x63\xe8\x9c\xd8\x13\x75\x14\xa5\xed\xe6\x78\xc6\x16\x3e\xcb\x67\x14\x1b\xbd\xfc\x59\xfe\x0f\x6c\x6a\x0a\x36\x4b\x5c\xf0\x90\x0f\x04\x33\x8d\x50\x62\x49\x48\x60\x34\xf9\x28\xed\xaa\x1e\xec\x44\xa4\xff\x55\x59\x17\x06\xad\x95\xc1\x88\x0a\x4c\x49\x11\xe4\x63\xa6\xde\x6e\x6c\x7f\xc0\x92\xac\x41\x28\x6c\x42\x2c\x7a\xc6\xf0\x43\x9a\x01\x2f\xfd\xa8\xcd\x27\xfc\x65\xa7\x65\xaa\x70\x8e\xb6\xe4\xb2\x02\x61\x49\xf3\x22\xca\x63\x1c\x28\xb1\xcc\x53\xc2\x32\x4f\xa8\x29\x57\xb0\x36\xd4\x2d\xc3\x5a\x5d\xb2\x24\xb4\x51\x35\x15\xa2\x56\x64\xf7\xad\xda\xfb\x99\x94\x26\x5b\x4e\xaa\x4d\x13\xb8\xc9\x1d\x1a\x5d\xa3\x46\x67\x47\xc5\xa9\x99\xa2\x86\x48\x35\xe2\x96\x00\x2b\x94\x14\x65\xb0\x86\x93\x11\x56\xb5\x58\x0c\x8a\xb1\x81\xdd\x28\x28\xf9\x64\xc7\xec\x6c\x15\xf4\x8a\xc9\x63\x58\x9c\x81\x8e\x80\xac\x0e\x24\xe3\x21\x44\x72\xb2\xad\xd2\x6a\xc6\x34\x9e\xe8\x95\x17\x1c\x44\x30\xec\x38\xb8\x25\x95\x84\x16\x3e\x2e\x2e\xd9\xd9\xbd\x39\x27\x60\xa4\x0c\xc7\xcb\xac\xf3\x21\xd3\x8a\xf9\xa0\x72\xb5\x35\xe5\x31\xeb\x06\x45\x09\x11\x2e\xf0\xba\xd8\x85\xb0\x78\xca\xc9\xd6\xf9\xba\xd4\x6b\x54\xce\x64\x50\xf6\x56\xae\x5c\x0b\xef\x95\x0e\xb8\x2a\xe2\xb1\xd9\x31\x43\xd6\xdf\x91\x5e\xce\x7e\xa4\xfe\x49\x8b\x05\x6c\x67\x9f\x6c\x11\xd8\xd0\x06\x85\xfd\x31\x5d\x37\xfc\xfe\xcb\xad\x4d\x24\xa3\x3d\x76\x31\x3a\xdb\x30\x4f\xe4\x53\xe6\x8c\x06\xe7\x24\xcb\xa3\x14\x7f\x3a\x49\xbe\x50\xe6\xa6\xf3\x7a\x7f\xc5\xf9\xfc\xac\x4f\xc0\x27\xf9\xbd\xbc\xb4\xa6\xbb\xa8\xdb\x70\x52\x36\xed\xa5\x70\xfd\xa7\x77\x96\x5b\x37\x44\xe2\x9a\xbf\x70\x71\x97\xbc\x19\x99\xe5\x45\x31\xaf\x9e\xbf\x37\xac\xc5\xcc\x6e\x0a\x86\x0e\x17\x3e\x2f\xfa\x01\xff\x55\x9d\x37\xa9\xba\xbc\x96\xf5\x41\x58\xaf\x7e\x07\x00\x00\xff\xff\xd5\xd9\xdb\x0b\xe1\x04\x00\x00")

func gamefileTomlBytes() ([]byte, error) {
	return bindataRead(
		_gamefileToml,
		"Gamefile.toml",
	)
}

func gamefileToml() (*asset, error) {
	bytes, err := gamefileTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Gamefile.toml", size: 1249, mode: os.FileMode(420), modTime: time.Unix(1454902392, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"Gamefile.toml": gamefileToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"Gamefile.toml": &bintree{gamefileToml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

