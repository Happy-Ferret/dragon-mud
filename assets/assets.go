// Code generated by go-bindata.
// sources:
// assets/raw/DragonInfo.toml
// assets/raw/Dragonfile.toml
// assets/raw/init.lua
// assets/raw/test.toml
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dragoninfoToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x4d\x6b\xdb\x40\x10\xbd\xef\xaf\x78\x48\x97\x36\x04\x91\x73\x20\x87\x80\x7b\x6c\x7b\x68\x72\x28\x26\x84\xb5\x76\x64\x0d\xd5\xee\xaa\xfb\x61\x27\x84\xfc\xf7\xb2\xa3\x75\xaa\xa4\x18\x7a\x31\x1e\x69\xe6\xcd\x9b\xf7\x9e\x5a\xbc\xbc\xcc\x53\xde\xb3\x7b\x74\xda\xd2\xeb\x2b\x7a\xef\x06\xde\xe7\xa0\x13\x7b\x87\x81\x27\x52\xaa\xbc\xc2\x0d\x9a\x0f\xbd\x8d\x3a\x50\x88\xa5\xed\x06\xcd\x55\x77\xd5\x5d\x35\xca\x50\xec\x03\xcf\xa9\x3e\xdd\x48\xb9\xa3\x7f\xd6\x8c\x14\xa8\x6b\x94\x6a\x71\x37\x72\x44\xa4\x5e\x46\x0c\x25\xcd\x53\x44\xa0\xdf\x99\x03\x59\x72\x29\x22\x8d\x3a\x21\x8e\x3e\x4f\x06\x3b\x82\xa5\x84\xc1\x07\xa4\x32\xb8\xa0\x22\x79\x1c\x7d\xf8\xd5\xa9\x16\x3f\x72\x3f\x42\xbf\x41\x18\x58\x76\x6c\xb3\xc5\x26\xe8\xbd\x77\x5f\xef\x37\xa8\xb4\x2f\xe1\x03\x0c\xcd\xe4\x0c\xb9\x9e\x29\xca\x03\x9f\x46\x0a\xaa\x45\xcc\xf3\xec\x43\x22\xf3\x8e\x4c\xa7\xb6\xeb\xf2\x41\x29\xa0\xde\x30\x30\x4d\x06\x86\x06\x76\x54\x48\xd3\xdb\xe6\x93\x4c\x7e\x28\x24\xfc\x5e\x48\xac\xe9\x73\x44\xef\xed\xac\x13\xef\x26\x12\xc4\x23\xa7\xb1\x93\x7f\xdf\xbe\xdf\x7d\xb9\xae\x07\x13\x12\x5b\xc2\x8e\xd8\xed\x2f\xa5\xf6\x6e\x7a\xc6\x41\x4f\x6c\xca\x6f\x26\x11\xb6\xe0\x5d\x28\xc0\xc8\xc5\x8f\x36\x9b\xe2\xc5\x85\xc8\xbd\x11\x7e\x32\x4b\x07\x91\xf7\xd9\xe7\x70\x22\x42\x96\x53\x84\x76\xe5\xe8\x9e\xe9\x40\xb1\xc3\x7d\xa4\x21\x4f\xc2\xc0\xf8\x3e\x97\xbb\x25\x1c\xaa\xc5\x9c\xc3\xec\x63\x69\xba\x75\x66\xc1\xc3\xa8\x23\x34\x24\x32\x05\x67\x1d\x08\x51\xa8\x7b\xef\xf8\xe2\xab\x6a\x4b\xf0\x22\xa7\xa2\xd1\x76\x5b\x68\x24\x32\x0f\x0f\xf8\x74\x8e\xe4\x67\x41\xdf\x6e\x03\xf5\xc4\x87\x75\xaf\x6a\x97\xc4\xac\x47\x38\x82\x9e\x66\xea\x8b\x9d\xd1\x5b\x4a\x23\xbb\x3d\x68\x8a\x54\xa2\x53\x00\x3b\xb5\x5d\xc6\xab\xa5\xf4\xa4\xed\x5c\xcd\x58\x11\x92\x1a\x38\x7d\x11\xb5\xeb\x7a\xe0\x10\x53\x53\x5f\x7e\xf8\x06\xe4\x5c\x5e\x12\x21\x7d\x27\x6c\x54\xd4\x45\xb8\x4e\xc6\xff\x73\x5f\xa4\xde\x3b\x73\x66\xe1\x4f\x4a\xd0\x4e\x72\x7c\x76\x55\xdd\xf3\x57\xbd\x0f\x8b\xf4\x91\x8a\x4e\xd7\xd2\x7f\x66\xcf\xad\xab\x96\x8b\xdc\x1c\x51\x87\x2e\xc5\x9a\xde\x5b\x8a\x18\x82\xb7\xa2\xf8\x51\x82\x59\x14\xef\x1a\xf5\x27\x00\x00\xff\xff\x6b\x8c\xf2\x86\x77\x04\x00\x00")

func dragoninfoTomlBytes() ([]byte, error) {
	return bindataRead(
		_dragoninfoToml,
		"DragonInfo.toml",
	)
}

func dragoninfoToml() (*asset, error) {
	bytes, err := dragoninfoTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "DragonInfo.toml", size: 1143, mode: os.FileMode(420), modTime: time.Unix(1488130523, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dragonfileToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x56\x4d\x8f\xe4\xc6\x0d\xbd\xeb\x57\x10\xdd\x87\xbe\x4c\x84\xb6\xb3\x88\x37\x06\xfa\x60\x7b\xf6\x30\x40\xe2\x09\x76\x27\x01\x82\x81\x31\x60\x4b\x94\x54\xbb\xa5\x2a\xa5\x48\x75\x4f\xc7\xf0\x7f\x0f\xc8\x2a\x69\xba\xd7\xf1\x51\x25\xd6\xe3\xc7\x23\x1f\x6b\x0b\xbf\xfe\xda\xe3\x48\x2f\xe2\xc4\xd3\x6f\xbf\xc1\x11\x99\xa0\x89\xa1\x73\xfd\x9c\x50\x5c\x0c\xd0\x39\x4f\x55\x15\x70\x24\x38\xc0\xe6\xd6\x7e\x53\x9d\x28\xb1\x5a\x1d\x60\xb3\xaf\xf7\xf5\x7e\x53\x55\xbf\x03\x0d\x24\xe7\x98\xbe\xdc\xe2\xd6\xd5\xb3\x90\x0f\x24\xbf\x54\x15\xc0\x16\x1e\x82\x50\xea\xb0\x21\x70\x0c\x32\x10\x60\xdb\x26\x62\x86\x4b\x9c\xe1\x8c\x41\xec\x90\x29\x9d\x28\x81\x44\x38\xba\xd0\x82\xc4\x1a\x7e\xbc\x40\x4b\x1d\xce\x5e\xc0\xc9\x8e\x0d\x6c\xe3\x63\x83\x7e\x88\x2c\x1b\x38\xce\xfa\x03\x1a\x0c\x80\x9e\x23\x1c\x15\x45\x14\x22\x47\x5c\xef\x37\x80\x0c\x67\xf2\x1e\x62\x02\x0c\x51\x06\x4a\xf0\xf0\x8f\x25\x02\x43\x14\xbb\x88\x4d\x43\xcc\xee\xe8\x09\xba\x14\x47\x88\xb3\xb0\x6b\xe9\x2a\xb4\xba\x02\x70\x6b\x2a\x87\xeb\x48\x72\x9e\x3f\x0d\x18\xfa\x7c\x63\x8a\x49\xb3\x42\xf9\xba\x60\x69\x0e\x0c\x31\x54\x90\x4d\x0e\xf0\x7e\xff\x7e\xff\x47\xd7\xd7\xa2\x4c\xc9\x9d\x50\xca\x79\x81\xa8\xe1\x69\x70\x7c\xfb\xcb\xe9\x0f\x7f\x31\xb8\x26\x86\x40\x8d\xe0\x9a\x91\xe2\x8d\xd8\x0c\x2e\x10\x68\xd4\x2e\xf4\xd7\x3e\x30\xb4\x0b\x3f\x8a\x01\x67\xbc\x68\x69\x98\x42\x6b\x78\xbb\x4f\x1f\x3e\xfe\xeb\xc3\xc7\x1d\x8c\xc4\x8c\x3d\xb1\xfe\x45\xef\x61\xa4\x91\x8e\x94\x18\x62\x67\xb7\x35\xdf\x1a\x1e\xad\xd4\x32\x60\x00\x19\x1c\xdf\x19\x83\xd9\x1f\x8e\x64\x88\xc8\x4b\x90\x16\x4a\xcc\x7f\x05\x43\x8b\xa9\xb5\x84\x6a\xb3\x7b\x7a\xbc\x7f\xfc\x1e\x7e\x60\xd6\x9e\x09\x64\x3c\xc9\x45\xff\x95\xe4\x5f\xde\x6a\xf9\x8d\x36\xe9\x27\x12\x85\x64\xe0\x89\x1a\xd7\xb9\x66\x05\x6f\x92\x9b\xcc\x9b\x71\x5b\x02\xa6\x57\x6a\x66\x1b\x88\x72\x30\xa5\xd8\x27\x1c\xeb\xea\x79\xbd\x50\x5a\xd9\x4a\xce\x1a\x71\x0c\x1a\xbc\xa0\x0b\x7a\xa0\xfe\x18\x12\x79\x3a\x59\x3f\xc7\x52\xd5\x3f\x99\x9f\x8c\xf2\xe6\xa7\x7e\xe3\x5b\x63\x39\xa1\x9f\x89\x61\xa0\x44\xd6\xcb\x03\x9e\x08\xda\x84\x2c\xae\x51\xb6\xc5\x8d\x04\xd4\x75\xd4\x08\x43\x6e\xf3\x06\x13\x75\xb3\x87\xf3\x40\xc1\xc0\xc6\xd8\xba\xee\xa2\x68\x2b\xd7\x65\x74\x58\xbd\x3d\xe7\x70\x2c\x8b\x35\x8f\x96\x84\xd2\xe8\x82\xfa\x8e\x67\x18\x31\x28\xe3\x82\x7e\x69\x09\xd2\xf8\xc8\x58\x4b\x04\x98\x08\xfa\x58\xa8\x3a\x52\x5d\xa0\x1e\x94\xd7\x41\x19\xd3\x63\xf4\x18\x1a\xba\xbb\x0d\xb3\x86\xa7\x18\x33\xfe\x02\x79\x8e\xb3\x6f\xd5\xe4\x8c\x2c\x6a\x73\x57\xe0\xd0\x66\x1f\xbc\x13\xf1\x04\x67\xe7\x3d\x24\x62\x93\x80\x00\x13\x26\x59\xfb\x8c\x2f\x2c\x34\xc2\x7f\x66\x9a\x35\xa8\x79\xb2\xbb\x67\x74\xca\x57\xbd\x26\xba\x16\x22\xd7\x59\x1d\x02\x93\xa7\x46\xa8\xd5\x16\x44\x60\x0c\x6f\x46\x2a\x93\x2d\xc4\x00\x42\x79\x44\xda\x39\xb9\xd0\x17\xb8\x96\x4e\xe4\xe3\x34\x52\x90\x1a\x7e\x9c\x05\x3a\x22\x0f\x5d\x22\xb2\x69\x68\x3f\xcf\x6c\x92\xd4\xc5\xa4\xea\x96\x20\x10\xb5\xbc\x04\xf3\xf3\xe3\xd3\x87\xef\xe1\xa3\xeb\x07\x81\x10\xcf\x36\x18\x25\x2a\xc7\x9a\x5f\xe7\xe7\x57\xb3\xcd\x65\x7a\x99\x62\xf4\x2f\xec\xfe\xab\x72\xf3\xcd\x5e\x5b\xfb\x3e\x61\x1f\xc3\xdf\xff\x79\x0f\x33\x67\x66\xe0\x87\xd4\xc7\xf0\xad\x83\x91\x64\x88\xad\xb9\xa6\xd0\xa4\x4b\x6e\xf4\x09\x99\xcf\x31\xb5\x5c\xf4\xc2\x69\xc6\x79\xb6\xab\xed\xaa\xdb\x59\x76\x46\x1a\x63\xba\x80\x39\x5c\x66\xa3\x20\xc5\x90\x99\x19\x08\x3c\x85\x5e\x86\xc5\xa0\x73\x01\x7d\xb5\x55\xbd\x9c\x66\x51\x27\xc4\xb4\xb4\x34\x26\x0a\x3b\x81\x56\x85\x2d\xc5\xd9\x24\xe3\x0b\xd1\xb4\xea\x80\x35\xfd\x9d\x09\xf9\x5a\xc9\xca\x24\xb9\x59\xd5\x70\xac\xe1\x01\x06\xd7\x0f\xfe\x02\x89\x9a\x38\x8e\x64\x91\xa0\xd8\x02\x69\x23\xa8\xae\x6b\xae\x67\x27\x83\xdd\x80\x39\xf8\xb2\x60\xaa\x6d\x9e\x27\x04\x96\x14\xb5\x4f\x42\x4b\xc9\x54\x46\xaf\x2c\x69\xda\x74\x29\x73\x03\xaa\x86\xea\x8c\xcf\xc9\x54\xe6\xd9\x0a\x10\x8b\x00\x2c\xe5\x7c\xc9\xb5\x5a\xc8\x79\xb7\xff\xeb\x5f\x6e\xff\x97\x2a\x1d\xe0\xcf\xdf\xe6\x01\x75\xe1\xc5\x09\xe5\x0d\xc9\x7a\x9e\x8f\xf1\xf5\xf6\xf8\xbd\xb2\xec\x63\xff\xb5\xba\xfc\x1f\x35\xf3\xb1\xef\x29\x19\xe1\x45\xb5\x3e\x6b\x12\x3c\x37\x83\x36\xf6\x88\xaf\x6e\x9c\xc7\x02\xe7\xb5\x73\x8d\xc3\xcc\x14\x08\xa6\x9e\x54\x1d\x9e\x7d\xcc\xf2\x96\x4d\x0e\xb0\x69\xe9\x38\xf7\x65\xa9\xdd\x53\xa7\x0b\x43\x21\xca\x0d\x3b\xfe\x9b\x7e\x5f\x26\x7b\x51\xb0\xe3\x3c\x95\xbb\xac\x27\xe8\x77\xe6\x68\xa7\xef\x8b\xdd\x9d\x05\x67\xb6\x57\xff\x4b\x2e\x54\x56\xf0\x42\xe6\xb9\xa8\xa7\xba\x5b\xe2\x8c\x80\xb0\x5c\x84\xf3\xe0\x3c\x15\x64\x68\x29\x44\xd1\x36\x0b\x80\x8d\xcc\xe8\x0d\x4c\xff\x69\x9b\x37\x89\x50\x67\x5c\xc5\x58\x62\xb2\x1c\x38\x4b\xef\x43\x67\xde\x9a\x21\x46\xbe\x09\x0b\x39\x8f\xad\x2f\xe9\x59\xf0\xc1\x32\xc8\x73\x6a\xc5\xb6\x3a\xa8\x54\x1b\xd8\x91\x80\x9c\x6d\xbb\x2b\xa0\x98\x60\x47\x29\xc5\xb4\xd3\x90\x9b\x01\x46\x9c\x78\x21\xee\xf1\x13\xec\x58\xda\x38\x4b\x29\x14\x4b\x4b\x29\xed\x72\x07\x45\x7b\x64\x70\x0d\xce\xa2\xdc\x25\xd2\x06\x87\x0e\x47\xe7\x1d\xa6\xa5\xcb\x35\xf2\x96\x04\x9d\xe7\xbc\x5b\x8f\xc4\x79\xf3\x88\x6b\xbe\x98\x55\xde\xb2\xb9\xf6\xbf\xa7\x07\x97\x44\x6e\x7f\xe9\x44\xde\x54\x69\x66\xba\xa2\x30\x57\xfe\x8f\xab\x52\x9e\x10\x13\xae\x12\x61\x58\x3e\xf6\xc6\x8b\x91\xec\x78\x58\x48\x96\x68\xeb\x49\x7b\xb0\x2e\xfd\xf5\xcb\xba\xa5\xa6\xe4\x46\x4c\x97\x95\x7d\x3b\xb6\x30\x0e\xb0\x59\x0e\x37\xf9\x34\x7b\xbf\x39\xaf\xb6\xf0\xd3\x8d\xbe\x2d\xaf\x8d\x18\xc0\x85\x2e\xa6\x31\x3f\x83\x25\xc2\xcf\x14\xdf\x7d\xae\xe1\xdf\xda\x14\x18\x2c\xe5\xbc\xad\x4e\x2e\xc5\xa0\x72\x5f\x6d\xc1\x1e\xca\x6b\x97\xe6\x56\x31\xf3\xdc\xcc\x97\xc2\xf4\xd5\x25\x85\xce\x5b\x9f\x6c\x55\xeb\x36\x0f\xba\x4d\xb6\xd7\xef\xca\x2c\xcc\x25\xb8\xb5\x49\x96\x85\x34\x33\x25\xf3\xac\x9c\x2d\xf2\xa2\xa5\xcd\x31\x57\xcf\x2d\x0a\xea\xd6\xaa\xaf\x96\x93\x95\x10\x67\xa5\x49\x5c\x93\xd3\x3c\x80\xa4\x59\xd9\xd0\xc7\xdf\x57\xef\xd7\xf5\x39\xba\xf9\xee\xdd\x77\xef\xf4\x7b\x75\x7b\x80\x4d\x50\x4f\x66\xb4\xb8\xbf\x3e\x7c\xab\xea\xcb\x88\xaf\x79\x53\xfd\x2f\x00\x00\xff\xff\x7c\x71\x5f\x1b\x7e\x0c\x00\x00")

func dragonfileTomlBytes() ([]byte, error) {
	return bindataRead(
		_dragonfileToml,
		"Dragonfile.toml",
	)
}

func dragonfileToml() (*asset, error) {
	bytes, err := dragonfileTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Dragonfile.toml", size: 3198, mode: os.FileMode(420), modTime: time.Unix(1487813417, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initLua = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\x55\x48\xcd\x2b\x29\xaa\x54\x28\xc8\xcf\xcc\x2b\x51\x48\xcb\x2f\x52\xa8\xcc\x2f\x2d\x52\x28\xc8\x29\x4d\xcf\xcc\x53\x48\xce\xcf\x2d\xc8\xcf\x4b\xcd\x2b\xd1\xe3\x02\x04\x00\x00\xff\xff\xc3\x8f\x57\xf3\x2a\x00\x00\x00")

func initLuaBytes() ([]byte, error) {
	return bindataRead(
		_initLua,
		"init.lua",
	)
}

func initLua() (*asset, error) {
	bytes, err := initLuaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init.lua", size: 42, mode: os.FileMode(420), modTime: time.Unix(1488145726, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\x28\xc9\xc8\x2c\x56\xc8\x2c\x56\x48\x54\x28\x49\x2d\x2e\x51\x48\xcb\xcc\x49\xe5\x02\x04\x00\x00\xff\xff\xab\x7a\x46\x4b\x16\x00\x00\x00")

func testTomlBytes() ([]byte, error) {
	return bindataRead(
		_testToml,
		"test.toml",
	)
}

func testToml() (*asset, error) {
	bytes, err := testTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test.toml", size: 22, mode: os.FileMode(420), modTime: time.Unix(1488130523, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"DragonInfo.toml": dragoninfoToml,
	"Dragonfile.toml": dragonfileToml,
	"init.lua": initLua,
	"test.toml": testToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"DragonInfo.toml": &bintree{dragoninfoToml, map[string]*bintree{}},
	"Dragonfile.toml": &bintree{dragonfileToml, map[string]*bintree{}},
	"init.lua": &bintree{initLua, map[string]*bintree{}},
	"test.toml": &bintree{testToml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

