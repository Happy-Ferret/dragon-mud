// Code generated by go-bindata.
// sources:
// assets/raw/Gamefile.toml
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _gamefileToml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x54\x4d\x6f\xdc\x46\x0c\xbd\xeb\x57\x10\xf2\x61\x2f\x85\xe0\x22\x97\xa0\xc0\x1e\xda\x38\x2d\x02\xa4\x75\x9b\x04\xbd\x18\x41\x41\x69\x28\x69\xea\xd1\x50\x19\x72\x76\xbb\x08\xfc\xdf\x0b\xce\x68\xd7\xeb\xa2\x81\x4e\xe2\xc7\x23\xf9\x1e\x87\x37\x70\x97\x70\xe2\x78\x47\x8a\x3e\x08\xf4\x28\x04\xa3\x0f\xd4\x34\x37\xf0\x0b\x2e\x04\x91\xf4\xc8\xe9\x11\x06\x8e\xa3\x9f\x72\x42\xf5\x1c\xbb\xe6\x21\x92\x7e\x6e\x1a\x80\x1b\x78\x17\x95\xd2\x88\x03\x81\x17\xd0\x99\x00\x9d\x4b\x24\x02\x27\xce\x70\xc4\xa8\xc5\x28\x94\x0e\x94\x40\x19\x7a\x1f\x1d\x28\x77\xf0\xd3\x09\x1c\x8d\x98\x83\x82\xd7\x9d\x14\xb0\x36\xf0\x80\x61\x66\xd1\x16\xfa\x6c\x0e\x18\x30\x02\x06\x61\xe8\x0d\x45\x0d\xa2\xbd\xed\xca\xd7\x02\x0a\x1c\x29\x04\xe0\x04\x18\x59\x67\x4a\xf0\xee\xf7\x73\x07\x05\x51\x4b\x22\x0e\x03\x89\xf8\x3e\x10\x8c\x89\x17\xe0\xac\xe2\x1d\x5d\xb5\xd6\x35\x00\xfe\x32\xca\xfe\xba\x93\x3a\xe7\x9b\x19\xe3\x54\x33\x56\x4e\x75\xaa\xc9\x28\x4a\x39\x0a\x70\x6c\xa0\xda\xf7\xf0\xfa\xf6\xf5\xed\xb7\x73\x36\x26\xd6\xe4\x0f\xa8\x9b\x7d\x83\xe8\xe0\xd3\xec\xe5\xa5\xcb\x9b\x23\x9c\x0a\xdc\xc0\x31\xd2\xa0\x78\x19\xc3\xf0\x16\x1c\x66\x1f\x09\xac\x55\x1f\xa7\xeb\x1a\x18\xdd\x59\x14\xc3\x80\x23\x9e\x8c\x0f\xa1\xe8\x0a\xde\xee\xe3\xdb\x0f\x7f\xbe\xfd\xb0\x83\x85\x44\x70\x22\x31\x2f\x86\x00\x0b\x2d\xd4\x53\x12\xe0\xf1\x32\x67\x07\xf7\x85\x5f\x9d\x31\x82\xce\x5e\xbe\x2b\xb2\xd5\x7a\xb8\x50\x41\x44\x39\x37\x59\x5a\xe1\xea\x55\x8c\x0e\x93\x2b\x03\x75\x25\xee\xd3\xfd\xdd\xfd\x0f\xf0\xa3\x88\x2d\x4a\xa4\x22\x8e\x9e\xaa\x6f\x1b\xff\xaf\x67\x36\xbf\xb7\x75\x0c\x3c\x19\xb6\xa2\x8f\x62\x8b\x60\x15\x04\x64\xa5\xc1\x8f\x7e\x38\xd7\x0a\x3c\x4d\x94\x60\xe4\x54\x59\x4f\xfc\x37\x0d\x0a\x92\x87\xd9\x9a\x5b\xf0\x1f\xbf\xe4\x65\x83\x0b\x74\xa0\x50\x58\xe2\xac\x6b\x56\x50\x4c\x13\xa9\x74\xcd\x43\xe0\xa9\xec\x77\x0d\xd9\x43\xeb\xa8\xcf\xd3\xb6\x0a\x77\x34\x1a\xe3\x06\xb1\x65\x14\xf3\x7b\xfb\x3f\xad\x64\x6d\x8a\x17\x35\xf6\x76\x2c\xbb\x52\x61\x67\xcf\x6a\x67\x0a\x53\x35\x5a\xa4\x94\xed\x9e\xf1\x40\x80\x1b\x14\xf0\x58\xb5\x11\x75\x9c\x75\x4b\x16\x75\x94\xd2\x0e\x8e\xb3\x0f\x75\x9f\x2e\xd1\xe5\xaf\xa2\x6f\x98\x32\x73\x0e\xce\xd6\x9e\xbc\x49\x56\x95\x81\x44\x01\xd5\x1f\x08\x56\xd4\xf9\x8a\xaf\xf2\xe0\xcb\x0b\xea\x85\x43\xd6\x1a\xd0\xc1\xaf\x39\xa8\x5f\xc3\x8b\x39\x01\x53\x15\x5a\xf2\x6a\xfa\x90\x33\xcd\x1e\x8c\xae\x6e\x0b\xf9\x5c\x78\x83\xca\xc4\x1e\x5a\x96\xb6\xfe\xd7\x86\xf7\xd0\xd6\xc9\x5a\x13\xf5\xcd\x76\x56\xea\x4c\x0e\x15\xed\x04\x75\xf0\xb3\xb5\x03\x61\x23\xf1\x52\xec\x12\x21\xb0\x06\xb2\x63\x35\xcc\x34\x3c\x5a\x72\x73\x03\x47\xff\xe8\x2b\xc1\xe7\xbb\x72\x0e\xb7\x57\xf0\xf1\x8f\xf7\x5e\xa9\x6b\x1e\x2e\x55\x9c\x69\xcb\xeb\x42\xb1\xde\x32\x74\xb8\x2a\xa5\xd2\xe2\x97\xe0\x95\x5e\x59\xe7\xae\x8f\xf6\xca\xf7\xd0\x7e\xfd\x6a\x27\xf1\x37\x5c\xe8\xe9\xa9\x73\xfd\xab\x6d\x1b\xae\xd2\x96\x93\x7c\x09\xed\x7f\xad\x2b\x8b\x4e\x89\x64\x8b\xcf\x52\xcd\x35\x6e\x45\x91\x23\x27\xf7\x6c\xf9\xff\x82\x5b\xb2\x48\x58\xd8\xd1\xf9\x2c\x94\x45\x3f\xe3\x3f\xb3\xf3\x22\xd4\x96\xd7\x8b\x1d\x8d\xb6\xf9\x37\x00\x00\xff\xff\x04\x92\xc6\xb1\xf1\x05\x00\x00")

func gamefileTomlBytes() ([]byte, error) {
	return bindataRead(
		_gamefileToml,
		"Gamefile.toml",
	)
}

func gamefileToml() (*asset, error) {
	bytes, err := gamefileTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Gamefile.toml", size: 1521, mode: os.FileMode(420), modTime: time.Unix(1474764008, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"Gamefile.toml": gamefileToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"Gamefile.toml": &bintree{gamefileToml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

