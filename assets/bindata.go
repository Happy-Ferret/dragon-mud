// Code generated by go-bindata.
// sources:
// assets/raw/default_config.toml
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _default_configToml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x54\x51\x6b\xdb\x30\x10\x7e\xcf\xaf\x38\xd2\x07\xbf\x14\xb7\xa3\x30\x4a\xa1\xec\x61\xed\xf6\xd2\x6d\xac\x1d\x83\x51\x4a\x91\xad\x8b\x2d\x22\x4b\x9e\x24\x27\x84\xd2\xff\xbe\xef\x64\xc7\x49\x60\x90\x80\x75\x77\xdf\xa7\xef\xce\xdf\xf9\x8c\xee\x82\x6a\xbc\xbb\xe3\xa4\x8c\x8d\x54\xa9\xc8\xb4\x32\x96\x17\x8b\x33\xfa\xaa\x3a\x26\xc7\x69\xeb\xc3\x9a\x6a\xef\x56\xa6\x19\x82\x4a\xc6\xbb\x72\xf1\x8c\xf8\x8b\x14\x7d\x6e\x95\x6b\x98\x52\xcb\xd4\xfb\x90\xf2\x43\x23\xc0\x30\xb8\x48\xde\x9d\x53\xb5\x23\xcd\x2b\x35\x58\x49\x9a\x48\xf8\x5d\x5f\x5e\x5f\x02\x2b\x75\xaf\x19\x75\xbb\x0f\xfd\x8f\x2e\x72\xd8\x70\xa0\x3e\x98\x8d\x4a\x53\x7c\x62\x2f\xe9\x97\x50\x9e\xa4\x8c\x24\xec\x0e\x64\xd0\xec\xb8\x4e\xaa\xb2\x68\x2a\xf8\x2e\xb3\x75\xaa\x6e\x8d\x63\x6a\x7d\x4c\xc6\x35\xc7\x37\x28\xa7\x05\x2d\x11\x61\xa0\xad\xda\x51\xf2\xc8\x3a\x0d\xb6\xe2\xe9\xfe\xf1\xf7\xfd\x63\x41\x1d\xc7\xa8\x1a\x8e\x92\x53\xd6\xe2\xdc\x71\xc5\x01\xd7\xae\xe6\xf6\x4b\xfa\x81\xc7\x80\xb3\x72\xb9\xed\x73\x32\xa9\x18\xb9\x23\xf2\xe0\x53\x71\x2f\x30\xcb\xf0\x63\x2e\x41\x84\x0a\x3a\xb7\x52\xa2\x6a\x6a\xed\x68\x4c\x1f\x64\xec\x77\xbc\x92\x26\xac\x07\x52\x85\x86\x53\x44\xf0\x41\x4e\xbb\x9e\x85\x37\x9a\x98\x44\x50\xe1\x63\x91\x1b\x2b\xe4\xb5\x16\x32\x30\x1e\x83\x52\x09\x09\xd0\xd7\xaa\x0d\x93\x9a\x88\x00\x92\x66\x63\xd2\x7e\x48\x13\x14\x07\x0e\xa1\xa0\x6d\x0b\x8e\xac\x73\xae\xcd\xa7\x91\x7b\x62\x8c\xad\x1f\xac\xa6\x8a\x89\x4d\x9e\x81\x02\x5f\x60\x0b\xe7\xe0\x9a\x5e\xa5\x76\xdf\xac\xa8\x17\x24\x79\x14\x55\xd1\xdb\x21\x8d\x05\x25\x7d\x83\x5d\x4c\x6f\x4f\x3a\x24\x15\x64\x6e\x71\xe8\x65\x18\xac\xe1\xc2\x67\xa4\xcb\x29\xfd\x02\x3f\xe6\xee\x6f\x69\xe9\xe3\x72\x31\x49\xc4\x69\xec\x65\x99\xed\x3a\xd9\x78\xec\x42\x2b\x98\x03\x96\x2f\xe9\x8b\x48\x20\x3b\x0d\x6d\xbe\x62\xae\x80\xc7\x2c\xcb\x72\xd4\x2d\xd7\x6b\x01\x83\x6c\x6b\xd6\x66\x1c\xe8\xde\xe0\xfb\x72\xb1\xd1\xd3\xcf\x07\x93\x18\x22\xe7\x5b\x34\x6f\xd8\xfa\xbe\x63\x27\xbb\xa3\xb4\xea\x13\xc6\x23\x02\xff\x5a\x94\x5e\x2d\x17\x79\x1a\x08\x08\xe4\xe2\xed\x4d\x36\xf0\x3b\xfe\xef\xef\xe5\x5c\x22\xce\x39\x20\x7b\xb8\xb8\x09\x8c\x76\xcf\x68\x88\x63\x4c\x9e\x75\xe5\x64\x09\x85\x2a\x2f\xf8\x6b\x37\x68\x89\xc7\x68\x3b\xaf\xc7\x84\x89\xb2\x19\xb9\x3a\xba\x63\xb2\x9b\x8b\x0b\xeb\x6b\x65\x65\x45\x4e\x54\x7c\x9a\xe0\xb7\x33\xf6\x54\x4d\xb7\x83\xcc\x23\xc2\x99\xe5\xe6\xea\xea\xf2\xe3\x09\x55\x86\xfe\xf1\xc3\xde\x2e\x7a\x34\xf4\x61\x58\x7d\xf0\x7a\xa8\xe5\x6b\xf3\x22\xab\xb2\x65\x6c\x1a\x7c\x83\xf0\xc6\xa0\x81\x43\x1a\xd0\xfc\xf1\x02\x1f\x0e\xb0\x68\xdd\x1e\xde\x03\x10\x18\x4b\xb9\xf8\x17\x00\x00\xff\xff\xf3\xd2\x4d\xda\xe9\x04\x00\x00")

func default_configTomlBytes() ([]byte, error) {
	return bindataRead(
		_default_configToml,
		"default_config.toml",
	)
}

func default_configToml() (*asset, error) {
	bytes, err := default_configTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "default_config.toml", size: 1257, mode: os.FileMode(420), modTime: time.Unix(1453871903, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"default_config.toml": default_configToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"default_config.toml": &bintree{default_configToml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

